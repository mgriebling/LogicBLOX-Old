//
//  Gates.swift
//  LogicBLOX
//
//  Created by Mike Griebling on 19 Sep 2017.
//  Copyright Â© 2017 Computer Inspirations. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Gates : NSObject {

    //// Cache

    private struct Cache {
        static let baseColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let highlightColour: UIColor = UIColor(red: 0.000, green: 0.480, blue: 0.998, alpha: 1.000)
        static let color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var baseColor: UIColor { return Cache.baseColor }
    @objc dynamic public class var highlightColour: UIColor { return Cache.highlightColour }
    @objc dynamic public class var color: UIColor { return Cache.color }

    //// Drawing Methods

    @objc dynamic public class func drawAnd(frame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 68), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 7, y: frame.minY + 5.97, width: frame.width - 13, height: frame.height - 11.97)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.56944 * group.width, y: group.minY + 0.00054 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.88000 * group.width, y: group.minY + 0.14687 * group.height), controlPoint1: CGPoint(x: group.minX + 0.68113 * group.width, y: group.minY + -0.00575 * group.height), controlPoint2: CGPoint(x: group.minX + 0.79469 * group.width, y: group.minY + 0.04283 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.88000 * group.width, y: group.minY + 0.85363 * group.height), controlPoint1: CGPoint(x: group.minX + 1.04000 * group.width, y: group.minY + 0.34204 * group.height), controlPoint2: CGPoint(x: group.minX + 1.04000 * group.width, y: group.minY + 0.65846 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.56944 * group.width, y: group.minY + 0.99936 * group.height), controlPoint1: CGPoint(x: group.minX + 0.79469 * group.width, y: group.minY + 0.95767 * group.height), controlPoint2: CGPoint(x: group.minX + 0.68113 * group.width, y: group.minY + 1.00625 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 1.00000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.00050 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.56944 * group.width, y: group.minY + 0.00050 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.56944 * group.width, y: group.minY + 0.00054 * group.height))
        bezierPath.close()
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()
    }

    @objc dynamic public class func drawOr(frame: CGRect = CGRect(x: 0, y: 1, width: 87, height: 67), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 4.4, y: frame.minY + 5.5, width: frame.width - 9.7, height: frame.height - 11)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.39909 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.40653 * group.width, y: group.minY + 0.00001 * group.height), controlPoint1: CGPoint(x: group.minX + 0.39907 * group.width, y: group.minY + 0.00000 * group.height), controlPoint2: CGPoint(x: group.minX + 0.40653 * group.width, y: group.minY + 0.00001 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.53854 * group.width, y: group.minY + 0.03305 * group.height), controlPoint1: CGPoint(x: group.minX + 0.45121 * group.width, y: group.minY + 0.00758 * group.height), controlPoint2: CGPoint(x: group.minX + 0.49542 * group.width, y: group.minY + 0.01824 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.82266 * group.width, y: group.minY + 0.21197 * group.height), controlPoint1: CGPoint(x: group.minX + 0.64236 * group.width, y: group.minY + 0.06869 * group.height), controlPoint2: CGPoint(x: group.minX + 0.73989 * group.width, y: group.minY + 0.12833 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 1.00000 * group.width, y: group.minY + 0.49985 * group.height), controlPoint1: CGPoint(x: group.minX + 0.90564 * group.width, y: group.minY + 0.29582 * group.height), controlPoint2: CGPoint(x: group.minX + 0.96476 * group.width, y: group.minY + 0.39465 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.82266 * group.width, y: group.minY + 0.78774 * group.height), controlPoint1: CGPoint(x: group.minX + 0.96476 * group.width, y: group.minY + 0.60506 * group.height), controlPoint2: CGPoint(x: group.minX + 0.90564 * group.width, y: group.minY + 0.70389 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.40653 * group.width, y: group.minY + 0.99866 * group.height), controlPoint1: CGPoint(x: group.minX + 0.70551 * group.width, y: group.minY + 0.90612 * group.height), controlPoint2: CGPoint(x: group.minX + 0.55880 * group.width, y: group.minY + 0.97642 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39909 * group.width, y: group.minY + 0.99970 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39687 * group.width, y: group.minY + 1.00000 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.00805 * group.width, y: group.minY + 0.99973 * group.height), controlPoint1: CGPoint(x: group.minX + 0.39687 * group.width, y: group.minY + 1.00000 * group.height), controlPoint2: CGPoint(x: group.minX + 0.11964 * group.width, y: group.minY + 0.99981 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.04130 * group.width, y: group.minY + 0.93065 * group.height), controlPoint1: CGPoint(x: group.minX + 0.01975 * group.width, y: group.minY + 0.97957 * group.height), controlPoint2: CGPoint(x: group.minX + 0.03088 * group.width, y: group.minY + 0.95654 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.04130 * group.width, y: group.minY + 0.08238 * group.height), controlPoint1: CGPoint(x: group.minX + 0.13558 * group.width, y: group.minY + 0.69641 * group.height), controlPoint2: CGPoint(x: group.minX + 0.13558 * group.width, y: group.minY + 0.31663 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.00000 * group.height), controlPoint1: CGPoint(x: group.minX + 0.02851 * group.width, y: group.minY + 0.05061 * group.height), controlPoint2: CGPoint(x: group.minX + 0.01465 * group.width, y: group.minY + 0.02315 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39687 * group.width, y: group.minY + 0.00001 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39907 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39909 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.close()
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()
    }

    @objc dynamic public class func drawShield(frame: CGRect = CGRect(x: 0, y: 1, width: 20, height: 67), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor


        //// Subframes
        let group2: CGRect = CGRect(x: frame.minX + 4.4, y: frame.minY + 5.5, width: frame.width - 10.4, height: frame.height - 11.01)


        //// Group 2
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: group2.minX + 0.00026 * group2.width, y: group2.minY + 0.00000 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.23924 * group2.width, y: group2.minY + 0.00000 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.00000 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.08978 * group2.width, y: group2.minY + 0.00000 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.24022 * group2.width, y: group2.minY + 1.00000 * group2.height), controlPoint1: CGPoint(x: group2.minX + 1.25327 * group2.width, y: group2.minY + 0.29295 * group2.height), controlPoint2: CGPoint(x: group2.minX + 1.25358 * group2.width, y: group2.minY + 0.70697 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.06483 * group2.width, y: group2.minY + 0.99998 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.17743 * group2.width, y: group2.minY + 0.99999 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.11873 * group2.width, y: group2.minY + 0.99998 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.33258 * group2.width, y: group2.minY + 0.93088 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.15901 * group2.width, y: group2.minY + 0.97981 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.24867 * group2.width, y: group2.minY + 0.95678 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.33258 * group2.width, y: group2.minY + 0.08240 * group2.height), controlPoint1: CGPoint(x: group2.minX + 1.09177 * group2.width, y: group2.minY + 0.69658 * group2.height), controlPoint2: CGPoint(x: group2.minX + 1.09177 * group2.width, y: group2.minY + 0.31670 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.00000 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.22961 * group2.width, y: group2.minY + 0.05063 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.11797 * group2.width, y: group2.minY + 0.02316 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.00026 * group2.width, y: group2.minY + 0.00000 * group2.height))
        bezier2Path.close()
        colour.setFill()
        bezier2Path.fill()
        colour.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.stroke()
    }

    @objc dynamic public class func drawNot(frame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 2.5, y: frame.minY + 2.5, width: frame.width - 5.2, height: frame.height - 5.2))
        colour.setStroke()
        ovalPath.lineWidth = 2.5
        ovalPath.stroke()
    }

    @objc dynamic public class func drawBuffer(frame: CGRect = CGRect(x: 0, y: 0, width: 49, height: 57), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 6, y: frame.minY + 4, width: frame.width - 8, height: frame.height - 9)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 1.00000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 1.00000 * group.width, y: group.minY + 0.50000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.close()
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()
    }

    @objc dynamic public class func drawExOr(frame: CGRect = CGRect(x: 0, y: 1, width: 97, height: 67), highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: group.minX + fastFloor(group.width * 0.10309 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.10309 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawOr(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.20619 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawShield(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), highlight: highlight)
        context.restoreGState()
    }

    @objc dynamic public class func drawOrNorGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 135, height: 67), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4, inputPinVisible: CGFloat = 0, outputPinVisible: Bool = true, invert: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 135, height: 67), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 135, y: resizedFrame.height / 67)



        //// Variable Declarations
        let notInvert = !invert

        //// Group
        if (notInvert) {
            //// Symbol 3 Drawing
            let symbol3Rect = CGRect(x: 95, y: 29, width: 31, height: 8)
            context.saveGState()
            context.clip(to: symbol3Rect)
            context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

            Gates.drawOutputPin(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, highlight: highlight, pinVisible: outputPinVisible)
            context.restoreGState()
        }


        //// Symbol Drawing
        let symbolRect = CGRect(x: 16, y: 0, width: 87, height: 67)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawOr(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 7, width: 31, height: 56)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawOrPins(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, highlight: highlight, inputs: inputs, inputPinVisible: inputPinVisible)
        context.restoreGState()


        if (invert) {
            //// Symbol 4 Drawing
            let symbol4Rect = CGRect(x: 97, y: 24, width: 36, height: 19)
            context.saveGState()
            context.clip(to: symbol4Rect)
            context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

            Gates.drawInvertingOutputPin(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, highlight: highlight, pinVisible: outputPinVisible)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawXorXnorGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 143, height: 67), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4, inputPinVisible: CGFloat = 0, outputPinVisible: Bool = true, invert: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 143, height: 67), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 143, y: resizedFrame.height / 67)



        //// Variable Declarations
        let notInvert = !invert

        //// Group
        if (notInvert) {
            //// Symbol 3 Drawing
            let symbol3Rect = CGRect(x: 105, y: 29, width: 31, height: 8)
            context.saveGState()
            context.clip(to: symbol3Rect)
            context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

            Gates.drawOutputPin(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, highlight: highlight, pinVisible: outputPinVisible)
            context.restoreGState()
        }


        //// Symbol Drawing
        let symbolRect = CGRect(x: 16, y: 0, width: 97, height: 67)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawExOr(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 7, width: 31, height: 56)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawOrPins(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, highlight: highlight, inputs: inputs, inputPinVisible: inputPinVisible)
        context.restoreGState()


        if (invert) {
            //// Symbol 4 Drawing
            let symbol4Rect = CGRect(x: 107, y: 24, width: 36, height: 19)
            context.saveGState()
            context.clip(to: symbol4Rect)
            context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

            Gates.drawInvertingOutputPin(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, highlight: highlight, pinVisible: outputPinVisible)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBufferInverterGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 102, height: 57), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputPinVisible: CGFloat = 0, outputPinVisible: Bool = true, invert: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 102, height: 57), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 102, y: resizedFrame.height / 57)



        //// Variable Declarations
        let pin1Visible = inputPinVisible == 1
        let notInvert = !invert

        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: 20, y: 0, width: 49, height: 57)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawBuffer(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 24, width: 27, height: 8)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin1Visible)
        context.restoreGState()


        if (notInvert) {
            //// Symbol 3 Drawing
            let symbol3Rect = CGRect(x: 64, y: 24, width: 31, height: 8)
            context.saveGState()
            context.clip(to: symbol3Rect)
            context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

            Gates.drawOutputPin(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, highlight: highlight, pinVisible: outputPinVisible)
            context.restoreGState()
        }


        if (invert) {
            //// Symbol 4 Drawing
            let symbol4Rect = CGRect(x: 66, y: 19, width: 36, height: 19)
            context.saveGState()
            context.clip(to: symbol4Rect)
            context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

            Gates.drawInvertingOutputPin(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, highlight: highlight, pinVisible: outputPinVisible)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAndNandGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 134, height: 68), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, pinVisible: Bool = true, inputs: CGFloat = 4, inputPinVisible: CGFloat = 0, invert: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 134, height: 68), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 134, y: resizedFrame.height / 68)



        //// Variable Declarations
        let notInvert = !invert

        //// Group
        if (notInvert) {
            //// Symbol 4 Drawing
            let symbol4Rect = CGRect(x: 98, y: 30, width: 31, height: 8)
            context.saveGState()
            context.clip(to: symbol4Rect)
            context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

            Gates.drawOutputPin(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pinVisible)
            context.restoreGState()
        }


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 20, y: 0, width: 86, height: 68)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawAnd(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), highlight: highlight)
        context.restoreGState()


        if (invert) {
            //// Symbol 5 Drawing
            let symbol5Rect = CGRect(x: 98, y: 25, width: 36, height: 19)
            context.saveGState()
            context.clip(to: symbol5Rect)
            context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

            Gates.drawInvertingOutputPin(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pinVisible)
            context.restoreGState()
        }


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 6, width: 30, height: 56)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawAndPins(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, highlight: highlight, inputs: inputs, inputPinVisible: inputPinVisible)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBlockGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 127, height: 121), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, pinVisible: Bool = true, inputs: CGFloat = 4, name: String = "Block Gate") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 127, height: 121), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 127, y: resizedFrame.height / 121)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group
        //// Rectangle Drawing
        let rectangleRect = CGRect(x: 27, y: 6, width: 72, height: 109)
        let rectanglePath = UIBezierPath(rect: rectangleRect)
        colour.setStroke()
        rectanglePath.lineWidth = 2.5
        rectanglePath.stroke()
        let rectangleStyle = NSMutableParagraphStyle()
        rectangleStyle.alignment = .center
        let rectangleFontAttributes = [
            NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 12)!,
            NSForegroundColorAttributeName: UIColor.black,
            NSParagraphStyleAttributeName: rectangleStyle,
        ]

        let rectangleTextHeight: CGFloat = name.boundingRect(with: CGSize(width: rectangleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rectangleRect)
        name.draw(in: CGRect(x: rectangleRect.minX, y: rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, width: rectangleRect.width, height: rectangleTextHeight), withAttributes: rectangleFontAttributes)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 6, width: 30, height: 56)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawAndPins(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, highlight: highlight, inputs: inputs, inputPinVisible: 4)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 0, y: 60, width: 30, height: 56)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawAndPins(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, highlight: highlight, inputs: inputs, inputPinVisible: 4)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 96, y: 23, width: 31, height: 8)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        Gates.drawOutputPin(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pinVisible)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 96, y: 90, width: 31, height: 8)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        Gates.drawOutputPin(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pinVisible)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawConnection(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 88, height: 57), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 88, height: 57), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 88, y: resizedFrame.height / 57)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 41))
        bezierPath.addLine(to: CGPoint(x: 44, y: 41))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.lineCapStyle = .square
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 44, y: 42))
        bezier3Path.addLine(to: CGPoint(x: 44, y: 15))
        colour.setStroke()
        bezier3Path.lineWidth = 2.5
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 44, y: 16))
        bezier4Path.addLine(to: CGPoint(x: 79, y: 16))
        colour.setStroke()
        bezier4Path.lineWidth = 2.5
        bezier4Path.lineCapStyle = .square
        bezier4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 57, height: 35), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, state: CGFloat = 0, outputPinVisible: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 57, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 57, y: resizedFrame.height / 35)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 57, resizedFrame.height / 35)


        //// Color Declarations
        let buttonLo = UIColor(red: 0.871, green: 0.866, blue: 0.919, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.6)
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 7

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let stateText = state == 1 ? "1" : "0"

        //// Group
        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 4.5, y: 5.5)
        context.scaleBy(x: 0.5, y: 0.5)

        let rectangleRect = CGRect(x: 0, y: 0, width: 49, height: 42)
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: 6)
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        buttonLo.setFill()
        rectanglePath.fill()
        context.restoreGState()

        colour.setStroke()
        rectanglePath.lineWidth = 5
        rectanglePath.stroke()
        let rectangleStyle = NSMutableParagraphStyle()
        rectangleStyle.alignment = .center
        let rectangleFontAttributes = [
            NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: 40)!,
            NSForegroundColorAttributeName: UIColor.black,
            NSParagraphStyleAttributeName: rectangleStyle,
        ]

        let rectangleTextHeight: CGFloat = stateText.boundingRect(with: CGSize(width: rectangleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rectangleRect)
        stateText.draw(in: CGRect(x: rectangleRect.minX, y: rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, width: rectangleRect.width, height: rectangleTextHeight), withAttributes: rectangleFontAttributes)
        context.restoreGState()

        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 27, y: 12, width: 31, height: 8)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawOutputPin(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, highlight: highlight, pinVisible: outputPinVisible)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIndicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 57, height: 35), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, state: CGFloat = 0, inputPinVisible: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 57, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 57, y: resizedFrame.height / 35)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 57, resizedFrame.height / 35)


        //// Color Declarations
        let buttonHi = UIColor(red: 0.290, green: 0.602, blue: 0.973, alpha: 1.000)

        //// Gradient Declarations
        let gradientHigh = CGGradient(colorsSpace: nil, colors: [UIColor.white.cgColor, UIColor.white.blended(withFraction: 0.5, of: buttonHi).cgColor, buttonHi.cgColor] as CFArray, locations: [0, 0.23, 1])!
        let gradientLow = CGGradient(colorsSpace: nil, colors: [UIColor.lightGray.cgColor, UIColor.lightGray.blended(withFraction: 0.5, of: UIColor.darkGray).cgColor, UIColor.darkGray.cgColor] as CFArray, locations: [0, 0.2, 0.61])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black.withAlphaComponent(0.6)
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 7

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let stateText = state == 1 ? "1" : "0"
        let gradientFill = stateText == "1" ? gradientHigh : gradientLow
        let pin1Visible = inputPinVisible == 1

        //// Group
        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 26, y: 5.5)
        context.scaleBy(x: 0.5, y: 0.5)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 49, height: 47))
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
//        context.beginTransparencyLayer(auxiliaryInfo: nil)
        ovalPath.addClip()
        context.drawRadialGradient(gradientFill,
            startCenter: CGPoint(x: 20.38, y: 15.04), startRadius: 5.1,
            endCenter: CGPoint(x: 24.5, y: 23.5), endRadius: 30.93,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
//        context.endTransparencyLayer()
        context.restoreGState()

        colour.setStroke()
        ovalPath.lineWidth = 5
        ovalPath.stroke()

        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 13, width: 27, height: 8)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, highlight: highlight, pinVisible: pin1Visible)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 6, height: 6), resizing: ResizingBehavior = .aspectFit, pinVisible: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 6, height: 6), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 6, y: resizedFrame.height / 6)


        //// Color Declarations
        let buttonHi = UIColor(red: 0.290, green: 0.602, blue: 0.973, alpha: 1.000)

        //// Gradient Declarations
        let gradientHigh = CGGradient(colorsSpace: nil, colors: [UIColor.white.cgColor, UIColor.white.blended(withFraction: 0.5, of: buttonHi).cgColor, buttonHi.cgColor] as CFArray, locations: [0, 0.23, 1])!

        if (pinVisible) {
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0.5, y: 0.5, width: 5, height: 5), cornerRadius: 2)
            context.saveGState()
            rectanglePath.addClip()
            context.drawRadialGradient(gradientHigh,
                startCenter: CGPoint(x: 3, y: 3), startRadius: 0.43,
                endCenter: CGPoint(x: 3, y: 3), endRadius: 2.8,
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            Gates.highlightColour.setStroke()
            rectanglePath.lineWidth = 1
            rectanglePath.stroke()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawOrPins(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 56), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4, inputPinVisible: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 56), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 56)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs == 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputs1 = inputs == 1
        let hasInputs1or3 = hasInputs1 || hasInputs3
        let pin1Visible = inputPinVisible == 1
        let pin2Visible = inputPinVisible == 2
        let pin1or2Visible = hasInputs1 && pin1Visible || hasInputs3 && pin2Visible
        let pin3Visible = inputPinVisible == 3
        let pin4Visible = inputPinVisible == 4
        let pin3or4Visible = hasInputs3 && pin3Visible || hasInputs4 && pin4Visible

        //// Group
        if (hasInputs1or3) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 2, y: 27))
            bezier2Path.addLine(to: CGPoint(x: 28, y: 27))
            colour.setStroke()
            bezier2Path.lineWidth = 2.5
            bezier2Path.stroke()
        }


        if (hasInputs3or4) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 2, y: 47))
            bezier3Path.addLine(to: CGPoint(x: 25, y: 47))
            colour.setStroke()
            bezier3Path.lineWidth = 2.5
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 2, y: 8))
            bezier4Path.addLine(to: CGPoint(x: 25, y: 8))
            colour.setStroke()
            bezier4Path.lineWidth = 2.5
            bezier4Path.stroke()
        }


        if (hasInputs2) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 2, y: 13))
            bezier5Path.addLine(to: CGPoint(x: 27, y: 13))
            colour.setStroke()
            bezier5Path.lineWidth = 2.5
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 2, y: 43))
            bezier6Path.addLine(to: CGPoint(x: 27, y: 43))
            colour.setStroke()
            bezier6Path.lineWidth = 2.5
            bezier6Path.stroke()
        }


        if (hasInputs4) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 2, y: 21))
            bezier7Path.addLine(to: CGPoint(x: 28, y: 21))
            colour.setStroke()
            bezier7Path.lineWidth = 2.5
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 2, y: 34))
            bezier8Path.addLine(to: CGPoint(x: 28, y: 34))
            colour.setStroke()
            bezier8Path.lineWidth = 2.5
            bezier8Path.stroke()
        }


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 20.38, y: 54.53))
        bezier9Path.addCurve(to: CGPoint(x: 22.56, y: 54.53), controlPoint1: CGPoint(x: 20.38, y: 54.53), controlPoint2: CGPoint(x: 21.2, y: 54.53))
        bezier9Path.addCurve(to: CGPoint(x: 22.56, y: -0.49), controlPoint1: CGPoint(x: 31.78, y: 38.41), controlPoint2: CGPoint(x: 31.78, y: 15.63))
        bezier9Path.addCurve(to: CGPoint(x: 20.97, y: -0.48), controlPoint1: CGPoint(x: 21.99, y: -0.49), controlPoint2: CGPoint(x: 21.46, y: -0.48))
        bezier9Path.addCurve(to: CGPoint(x: 23.4, y: 3.32), controlPoint1: CGPoint(x: 21.83, y: 0.62), controlPoint2: CGPoint(x: 22.64, y: 1.89))
        bezier9Path.addCurve(to: CGPoint(x: 23.4, y: 49.99), controlPoint1: CGPoint(x: 30.31, y: 16.21), controlPoint2: CGPoint(x: 30.31, y: 37.1))
        bezier9Path.addCurve(to: CGPoint(x: 20.38, y: 54.53), controlPoint1: CGPoint(x: 22.47, y: 51.74), controlPoint2: CGPoint(x: 21.45, y: 53.25))
        bezier9Path.addLine(to: CGPoint(x: 20.38, y: 54.53))
        bezier9Path.close()
        colour.setFill()
        bezier9Path.fill()
        colour.setStroke()
        bezier9Path.lineWidth = 1.5
        bezier9Path.stroke()


        if (hasInputs2) {
            //// Symbol Drawing
            let symbolRect = CGRect(x: 0, y: 9, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbolRect)
            context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, highlight: highlight, pinVisible: pin1Visible)
            context.restoreGState()


            //// Symbol 2 Drawing
            let symbol2Rect = CGRect(x: 0, y: 39, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol2Rect)
            context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin2Visible)
            context.restoreGState()
        }


        if (hasInputs3or4) {
            //// Symbol 3 Drawing
            let symbol3Rect = CGRect(x: 0, y: 4, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol3Rect)
            context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin1Visible)
            context.restoreGState()


            //// Symbol 4 Drawing
            let symbol4Rect = CGRect(x: 0, y: 43, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol4Rect)
            context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin3or4Visible)
            context.restoreGState()
        }


        if (hasInputs1or3) {
            //// Symbol 5 Drawing
            let symbol5Rect = CGRect(x: 0, y: 23, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol5Rect)
            context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin1or2Visible)
            context.restoreGState()
        }


        if (hasInputs4) {
            //// Symbol 6 Drawing
            let symbol6Rect = CGRect(x: 0, y: 17, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol6Rect)
            context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin2Visible)
            context.restoreGState()


            //// Symbol 7 Drawing
            let symbol7Rect = CGRect(x: 0, y: 30, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol7Rect)
            context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin3Visible)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAndPins(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 56), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4, inputPinVisible: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 56), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 56)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs == 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputs1 = inputs == 1
        let hasInputs1or3 = hasInputs1 || hasInputs3
        let pin1Visible = inputPinVisible == 1
        let pin2Visible = inputPinVisible == 2
        let pin1or2Visible = hasInputs1 && pin1Visible || hasInputs3 && pin2Visible
        let pin3Visible = inputPinVisible == 3
        let pin4Visible = inputPinVisible == 4
        let pin3or4Visible = hasInputs3 && pin3Visible || hasInputs4 && pin4Visible

        //// Group
        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 27, y: 56))
        bezier10Path.addLine(to: CGPoint(x: 27, y: 0))
        colour.setStroke()
        bezier10Path.lineWidth = 2.5
        bezier10Path.stroke()


        if (hasInputs3or4) {
            //// Symbol Drawing
            let symbolRect = CGRect(x: 0, y: 4, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbolRect)
            context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, highlight: highlight, pinVisible: pin1Visible)
            context.restoreGState()
        }


        if (hasInputs4) {
            //// Symbol 2 Drawing
            let symbol2Rect = CGRect(x: 0, y: 17, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol2Rect)
            context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin2Visible)
            context.restoreGState()


            //// Symbol 3 Drawing
            let symbol3Rect = CGRect(x: 0, y: 30, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol3Rect)
            context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin3Visible)
            context.restoreGState()
        }


        if (hasInputs3or4) {
            //// Symbol 4 Drawing
            let symbol4Rect = CGRect(x: 0, y: 43, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol4Rect)
            context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin3or4Visible)
            context.restoreGState()
        }


        if (hasInputs1or3) {
            //// Symbol 5 Drawing
            let symbol5Rect = CGRect(x: 0, y: 23, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol5Rect)
            context.translateBy(x: symbol5Rect.minX, y: symbol5Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol5Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin1or2Visible)
            context.restoreGState()
        }


        if (hasInputs2) {
            //// Symbol 6 Drawing
            let symbol6Rect = CGRect(x: 0, y: 9, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol6Rect)
            context.translateBy(x: symbol6Rect.minX, y: symbol6Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol6Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin1Visible)
            context.restoreGState()


            //// Symbol 7 Drawing
            let symbol7Rect = CGRect(x: 0, y: 39, width: 27, height: 8)
            context.saveGState()
            context.clip(to: symbol7Rect)
            context.translateBy(x: symbol7Rect.minX, y: symbol7Rect.minY)

            Gates.drawInputPin(frame: CGRect(origin: .zero, size: symbol7Rect.size), resizing: .stretch, highlight: highlight, pinVisible: pin2Visible)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawOutputPin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 31, height: 8), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, pinVisible: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 31, height: 8), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 31, y: resizedFrame.height / 8)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group
        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 3, y: 4))
        bezier16Path.addLine(to: CGPoint(x: 26, y: 4))
        colour.setStroke()
        bezier16Path.lineWidth = 2.5
        bezier16Path.stroke()


        if (pinVisible) {
            //// Symbol 2 Drawing
            let symbol2Rect = CGRect(x: 23, y: 1, width: 6, height: 6)
            context.saveGState()
            context.clip(to: symbol2Rect)
            context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

            Gates.drawPin(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, pinVisible: true)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawInvertingOutputPin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 19), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, pinVisible: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 19)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group
        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 16, y: 9))
        bezier16Path.addLine(to: CGPoint(x: 32, y: 9))
        colour.setStroke()
        bezier16Path.lineWidth = 2.5
        bezier16Path.stroke()


        if (pinVisible) {
            //// Symbol 2 Drawing
            let symbol2Rect = CGRect(x: 29, y: 6, width: 6, height: 6)
            context.saveGState()
            context.clip(to: symbol2Rect)
            context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

            Gates.drawPin(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, pinVisible: true)
            context.restoreGState()
        }


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 19, height: 19)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawNot(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawInputPin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 8), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, pinVisible: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 27, height: 8), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 8)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group
        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 3, y: 4))
        bezier16Path.addLine(to: CGPoint(x: 26, y: 4))
        colour.setStroke()
        bezier16Path.lineWidth = 2.5
        bezier16Path.stroke()


        if (pinVisible) {
            //// Symbol 2 Drawing
            let symbol2Rect = CGRect(x: 0, y: 1, width: 6, height: 6)
            context.saveGState()
            context.clip(to: symbol2Rect)
            context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

            Gates.drawPin(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, pinVisible: true)
            context.restoreGState()
        }
        
        context.restoreGState()

    }

    @objc dynamic public class func drawInvertingInputPin(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 15), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, pinVisible: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 15)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group
        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 4, y: 7.3))
        bezier16Path.addLine(to: CGPoint(x: 20, y: 7.3))
        colour.setStroke()
        bezier16Path.lineWidth = 2.5
        bezier16Path.stroke()


        if (pinVisible) {
            //// Symbol 2 Drawing
            let symbol2Rect = CGRect(x: 1, y: 4.3, width: 6, height: 6)
            context.saveGState()
            context.clip(to: symbol2Rect)
            context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

            Gates.drawPin(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, pinVisible: true)
            context.restoreGState()
        }


        //// Symbol Drawing
        context.saveGState()
        context.translateBy(x: 18, y: 1)
        context.scaleBy(x: 0.7, y: 0.7)

        let symbolRect = CGRect(x: 0, y: 0, width: 19, height: 19)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawNot(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()

        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfOrNorGate(highlight: Bool = false, inputs: CGFloat = 4, inputPinVisible: CGFloat = 0, outputPinVisible: Bool = true, invert: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 135, height: 67), false, 0)
            Gates.drawOrNorGate(highlight: highlight, inputs: inputs, inputPinVisible: inputPinVisible, outputPinVisible: outputPinVisible, invert: invert)

        let imageOfOrNorGate = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysTemplate)
        UIGraphicsEndImageContext()

        return imageOfOrNorGate
    }

    @objc dynamic public class func imageOfXorXnorGate(highlight: Bool = false, inputs: CGFloat = 4, inputPinVisible: CGFloat = 0, outputPinVisible: Bool = true, invert: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 143, height: 67), false, 0)
            Gates.drawXorXnorGate(highlight: highlight, inputs: inputs, inputPinVisible: inputPinVisible, outputPinVisible: outputPinVisible, invert: invert)

        let imageOfXorXnorGate = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfXorXnorGate
    }

    @objc dynamic public class func imageOfBufferInverterGate(highlight: Bool = false, inputPinVisible: CGFloat = 0, outputPinVisible: Bool = true, invert: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 102, height: 57), false, 0)
            Gates.drawBufferInverterGate(highlight: highlight, inputPinVisible: inputPinVisible, outputPinVisible: outputPinVisible, invert: invert)

        let imageOfBufferInverterGate = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfBufferInverterGate
    }

    @objc dynamic public class func imageOfAndNandGate(highlight: Bool = false, pinVisible: Bool = true, inputs: CGFloat = 4, inputPinVisible: CGFloat = 0, invert: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 134, height: 68), false, 0)
            Gates.drawAndNandGate(highlight: highlight, pinVisible: pinVisible, inputs: inputs, inputPinVisible: inputPinVisible, invert: invert)

        let imageOfAndNandGate = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfAndNandGate
    }

    @objc dynamic public class func imageOfBlockGate(highlight: Bool = false, pinVisible: Bool = true, inputs: CGFloat = 4, name: String = "Block Gate") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 127, height: 121), false, 0)
            Gates.drawBlockGate(highlight: highlight, pinVisible: pinVisible, inputs: inputs, name: name)

        let imageOfBlockGate = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfBlockGate
    }

    @objc dynamic public class func imageOfConnection(highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 88, height: 57), false, 0)
            Gates.drawConnection(highlight: highlight)

        let imageOfConnection = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfConnection
    }

    @objc dynamic public class func imageOfButton(highlight: Bool = false, state: CGFloat = 0, outputPinVisible: Bool = true) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 57, height: 35), false, 0)
            Gates.drawButton(highlight: highlight, state: state, outputPinVisible: outputPinVisible)

        let imageOfButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfButton
    }

    @objc dynamic public class func imageOfIndicator(highlight: Bool = false, state: CGFloat = 0, inputPinVisible: CGFloat = 0) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 57, height: 35), false, 0)
            Gates.drawIndicator(highlight: highlight, state: state, inputPinVisible: inputPinVisible)

        let imageOfIndicator = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfIndicator
    }




    @objc(GatesResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
