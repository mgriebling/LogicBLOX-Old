//
//  Gates.swift
//  LogicBLOX
//
//  Created by Mike Griebling on 5 Sep 2017.
//  Copyright Â© 2017 Computer Inspirations. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class Gates : NSObject {

    //// Cache

    private struct Cache {
        static let baseColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let highlightColour: UIColor = UIColor(red: 0.000, green: 0.480, blue: 0.998, alpha: 1.000)
        static let color: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var baseColor: UIColor { return Cache.baseColor }
    @objc dynamic public class var highlightColour: UIColor { return Cache.highlightColour }
    @objc dynamic public class var color: UIColor { return Cache.color }

    //// Drawing Methods

    @objc dynamic public class func drawAnd(frame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 68), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 7, y: frame.minY + 5.97, width: frame.width - 13, height: frame.height - 11.97)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.56944 * group.width, y: group.minY + 0.00054 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.88000 * group.width, y: group.minY + 0.14687 * group.height), controlPoint1: CGPoint(x: group.minX + 0.68113 * group.width, y: group.minY + -0.00575 * group.height), controlPoint2: CGPoint(x: group.minX + 0.79469 * group.width, y: group.minY + 0.04283 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.88000 * group.width, y: group.minY + 0.85363 * group.height), controlPoint1: CGPoint(x: group.minX + 1.04000 * group.width, y: group.minY + 0.34204 * group.height), controlPoint2: CGPoint(x: group.minX + 1.04000 * group.width, y: group.minY + 0.65846 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.56944 * group.width, y: group.minY + 0.99936 * group.height), controlPoint1: CGPoint(x: group.minX + 0.79469 * group.width, y: group.minY + 0.95767 * group.height), controlPoint2: CGPoint(x: group.minX + 0.68113 * group.width, y: group.minY + 1.00625 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 1.00000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.00050 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.56944 * group.width, y: group.minY + 0.00050 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.56944 * group.width, y: group.minY + 0.00054 * group.height))
        bezierPath.close()
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()
    }

    @objc dynamic public class func drawOr(frame: CGRect = CGRect(x: 0, y: 1, width: 87, height: 67), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 4.4, y: frame.minY + 5.5, width: frame.width - 9.7, height: frame.height - 11)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.39909 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.40653 * group.width, y: group.minY + 0.00001 * group.height), controlPoint1: CGPoint(x: group.minX + 0.39907 * group.width, y: group.minY + 0.00000 * group.height), controlPoint2: CGPoint(x: group.minX + 0.40653 * group.width, y: group.minY + 0.00001 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.53854 * group.width, y: group.minY + 0.03305 * group.height), controlPoint1: CGPoint(x: group.minX + 0.45121 * group.width, y: group.minY + 0.00758 * group.height), controlPoint2: CGPoint(x: group.minX + 0.49542 * group.width, y: group.minY + 0.01824 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.82266 * group.width, y: group.minY + 0.21197 * group.height), controlPoint1: CGPoint(x: group.minX + 0.64236 * group.width, y: group.minY + 0.06869 * group.height), controlPoint2: CGPoint(x: group.minX + 0.73989 * group.width, y: group.minY + 0.12833 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 1.00000 * group.width, y: group.minY + 0.49985 * group.height), controlPoint1: CGPoint(x: group.minX + 0.90564 * group.width, y: group.minY + 0.29582 * group.height), controlPoint2: CGPoint(x: group.minX + 0.96476 * group.width, y: group.minY + 0.39465 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.82266 * group.width, y: group.minY + 0.78774 * group.height), controlPoint1: CGPoint(x: group.minX + 0.96476 * group.width, y: group.minY + 0.60506 * group.height), controlPoint2: CGPoint(x: group.minX + 0.90564 * group.width, y: group.minY + 0.70389 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.40653 * group.width, y: group.minY + 0.99866 * group.height), controlPoint1: CGPoint(x: group.minX + 0.70551 * group.width, y: group.minY + 0.90612 * group.height), controlPoint2: CGPoint(x: group.minX + 0.55880 * group.width, y: group.minY + 0.97642 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39909 * group.width, y: group.minY + 0.99970 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39687 * group.width, y: group.minY + 1.00000 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.00805 * group.width, y: group.minY + 0.99973 * group.height), controlPoint1: CGPoint(x: group.minX + 0.39687 * group.width, y: group.minY + 1.00000 * group.height), controlPoint2: CGPoint(x: group.minX + 0.11964 * group.width, y: group.minY + 0.99981 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.04130 * group.width, y: group.minY + 0.93065 * group.height), controlPoint1: CGPoint(x: group.minX + 0.01975 * group.width, y: group.minY + 0.97957 * group.height), controlPoint2: CGPoint(x: group.minX + 0.03088 * group.width, y: group.minY + 0.95654 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.04130 * group.width, y: group.minY + 0.08238 * group.height), controlPoint1: CGPoint(x: group.minX + 0.13558 * group.width, y: group.minY + 0.69641 * group.height), controlPoint2: CGPoint(x: group.minX + 0.13558 * group.width, y: group.minY + 0.31663 * group.height))
        bezierPath.addCurve(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.00000 * group.height), controlPoint1: CGPoint(x: group.minX + 0.02851 * group.width, y: group.minY + 0.05061 * group.height), controlPoint2: CGPoint(x: group.minX + 0.01465 * group.width, y: group.minY + 0.02315 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39687 * group.width, y: group.minY + 0.00001 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39907 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.39909 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.close()
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()
    }

    @objc dynamic public class func drawShield(frame: CGRect = CGRect(x: 0, y: 1, width: 20, height: 67), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor


        //// Subframes
        let group2: CGRect = CGRect(x: frame.minX + 4.4, y: frame.minY + 5.5, width: frame.width - 10.4, height: frame.height - 11.01)


        //// Group 2
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: group2.minX + 0.00026 * group2.width, y: group2.minY + 0.00000 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.23924 * group2.width, y: group2.minY + 0.00000 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.00000 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.08978 * group2.width, y: group2.minY + 0.00000 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.24022 * group2.width, y: group2.minY + 1.00000 * group2.height), controlPoint1: CGPoint(x: group2.minX + 1.25327 * group2.width, y: group2.minY + 0.29295 * group2.height), controlPoint2: CGPoint(x: group2.minX + 1.25358 * group2.width, y: group2.minY + 0.70697 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.06483 * group2.width, y: group2.minY + 0.99998 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.17743 * group2.width, y: group2.minY + 0.99999 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.11873 * group2.width, y: group2.minY + 0.99998 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.33258 * group2.width, y: group2.minY + 0.93088 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.15901 * group2.width, y: group2.minY + 0.97981 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.24867 * group2.width, y: group2.minY + 0.95678 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.33258 * group2.width, y: group2.minY + 0.08240 * group2.height), controlPoint1: CGPoint(x: group2.minX + 1.09177 * group2.width, y: group2.minY + 0.69658 * group2.height), controlPoint2: CGPoint(x: group2.minX + 1.09177 * group2.width, y: group2.minY + 0.31670 * group2.height))
        bezier2Path.addCurve(to: CGPoint(x: group2.minX + 0.00000 * group2.width, y: group2.minY + 0.00000 * group2.height), controlPoint1: CGPoint(x: group2.minX + 0.22961 * group2.width, y: group2.minY + 0.05063 * group2.height), controlPoint2: CGPoint(x: group2.minX + 0.11797 * group2.width, y: group2.minY + 0.02316 * group2.height))
        bezier2Path.addLine(to: CGPoint(x: group2.minX + 0.00026 * group2.width, y: group2.minY + 0.00000 * group2.height))
        bezier2Path.close()
        colour.setFill()
        bezier2Path.fill()
        colour.setStroke()
        bezier2Path.lineWidth = 1.5
        bezier2Path.stroke()
    }

    @objc dynamic public class func drawNot(frame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 19), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: frame.minX + 2.5, y: frame.minY + 2.5, width: frame.width - 5.2, height: frame.height - 5.2))
        colour.setStroke()
        ovalPath.lineWidth = 2.5
        ovalPath.stroke()
    }

    @objc dynamic public class func drawBuffer(frame: CGRect = CGRect(x: 0, y: 0, width: 49, height: 57), highlight: Bool = false) {

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 6, y: frame.minY + 4, width: frame.width - 8, height: frame.height - 9)


        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 1.00000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 1.00000 * group.width, y: group.minY + 0.50000 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.00000 * group.width, y: group.minY + 0.00000 * group.height))
        bezierPath.close()
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()
    }

    @objc dynamic public class func drawInverter(frame: CGRect = CGRect(x: 0, y: 0, width: 65, height: 57), highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.75385 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawBuffer(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: group.minX + fastFloor(group.width * 0.70769 + 0.5), y: group.minY + fastFloor(group.height * 0.33333 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.70769 + 0.5), height: fastFloor(group.height * 0.66667 + 0.5) - fastFloor(group.height * 0.33333 + 0.5))
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawNot(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), highlight: highlight)
        context.restoreGState()
    }

    @objc dynamic public class func drawNand(frame: CGRect = CGRect(x: 0, y: 0, width: 98, height: 68), highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.87755 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawAnd(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: group.minX + fastFloor(group.width * 0.80612 + 0.5), y: group.minY + fastFloor(group.height * 0.35294 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.80612 + 0.5), height: fastFloor(group.height * 0.63235 + 0.5) - fastFloor(group.height * 0.35294 + 0.5))
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawNot(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), highlight: highlight)
        context.restoreGState()
    }

    @objc dynamic public class func drawExOr(frame: CGRect = CGRect(x: 0, y: 1, width: 97, height: 67), highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: group.minX + fastFloor(group.width * 0.10309 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.10309 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawOr(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.20619 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawShield(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), highlight: highlight)
        context.restoreGState()
    }

    @objc dynamic public class func drawExNor(frame: CGRect = CGRect(x: 0, y: 1, width: 110, height: 67), highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height)


        //// Group
        //// Symbol Drawing
        let symbolRect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 0.88182 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawExOr(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: group.minX + fastFloor(group.width * 0.82727 + 0.5), y: group.minY + fastFloor(group.height * 0.35821 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.82727 + 0.5), height: fastFloor(group.height * 0.64179 + 0.5) - fastFloor(group.height * 0.35821 + 0.5))
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawNot(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), highlight: highlight)
        context.restoreGState()
    }

    @objc dynamic public class func drawNor(frame: CGRect = CGRect(x: 0, y: 1, width: 100, height: 67), highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group
        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: frame.minX, y: frame.minY, width: 87, height: 67)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        Gates.drawOr(frame: CGRect(x: 0, y: 0, width: symbol2Rect.width, height: symbol2Rect.height), highlight: highlight)
        context.restoreGState()


        //// Symbol Drawing
        let symbolRect = CGRect(x: frame.minX + 81, y: frame.minY + 24, width: 19, height: 19)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawNot(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
    }

    @objc dynamic public class func drawOrGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 123, height: 70), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 123, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 123, y: resizedFrame.height / 70)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs <= 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputsGt4 = inputs > 4
        let hasInputs8 = inputs >= 8
        let hasInputs10 = inputs >= 10
        let hasInputs12 = inputs >= 12
        let hasInputs5 = inputs >= 5
        let hasInputs6 = inputs >= 6
        let hasInputs7 = inputs >= 7
        let hasInputs11 = inputs >= 11
        let hasInputs9 = inputs >= 9

        //// Group
        //// Or IO
        if (hasInputs3) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 0.96, y: 34))
            bezier2Path.addLine(to: CGPoint(x: 26.86, y: 34))
            colour.setStroke()
            bezier2Path.lineWidth = 2.5
            bezier2Path.stroke()
        }


        if (hasInputs3or4) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 0.96, y: 55))
            bezier3Path.addLine(to: CGPoint(x: 23.02, y: 55))
            colour.setStroke()
            bezier3Path.lineWidth = 2.5
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 0.96, y: 15))
            bezier4Path.addLine(to: CGPoint(x: 23.98, y: 15))
            colour.setStroke()
            bezier4Path.lineWidth = 2.5
            bezier4Path.stroke()
        }


        if (hasInputs2) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 0, y: 20))
            bezier5Path.addLine(to: CGPoint(x: 24.94, y: 20))
            colour.setStroke()
            bezier5Path.lineWidth = 2.5
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 0, y: 50))
            bezier6Path.addLine(to: CGPoint(x: 24.94, y: 50))
            colour.setStroke()
            bezier6Path.lineWidth = 2.5
            bezier6Path.stroke()
        }


        if (hasInputs4) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 0.96, y: 28))
            bezier7Path.addLine(to: CGPoint(x: 26.86, y: 28))
            colour.setStroke()
            bezier7Path.lineWidth = 2.5
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 0.96, y: 42))
            bezier8Path.addLine(to: CGPoint(x: 26.86, y: 42))
            colour.setStroke()
            bezier8Path.lineWidth = 2.5
            bezier8Path.stroke()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 96, y: 34))
        bezierPath.addLine(to: CGPoint(x: 118, y: 34))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()




        if (hasInputsGt4) {
            //// Bottom Or IO
            if (hasInputsGt4) {
                //// Bezier 11 Drawing
                let bezier11Path = UIBezierPath()
                bezier11Path.move(to: CGPoint(x: 18.41, y: 119.51))
                bezier11Path.addCurve(to: CGPoint(x: 20.58, y: 119.51), controlPoint1: CGPoint(x: 18.41, y: 119.51), controlPoint2: CGPoint(x: 19.22, y: 119.51))
                bezier11Path.addCurve(to: CGPoint(x: 20.59, y: 64.51), controlPoint1: CGPoint(x: 29.79, y: 103.4), controlPoint2: CGPoint(x: 29.79, y: 80.62))
                bezier11Path.addCurve(to: CGPoint(x: 18.99, y: 64.51), controlPoint1: CGPoint(x: 20.02, y: 64.51), controlPoint2: CGPoint(x: 19.48, y: 64.51))
                bezier11Path.addCurve(to: CGPoint(x: 21.43, y: 68.31), controlPoint1: CGPoint(x: 19.85, y: 65.62), controlPoint2: CGPoint(x: 20.66, y: 66.88))
                bezier11Path.addCurve(to: CGPoint(x: 21.43, y: 114.98), controlPoint1: CGPoint(x: 28.32, y: 81.19), controlPoint2: CGPoint(x: 28.32, y: 102.09))
                bezier11Path.addCurve(to: CGPoint(x: 18.41, y: 119.51), controlPoint1: CGPoint(x: 20.49, y: 116.72), controlPoint2: CGPoint(x: 19.48, y: 118.24))
                bezier11Path.addLine(to: CGPoint(x: 18.41, y: 119.51))
                bezier11Path.close()
                colour.setFill()
                bezier11Path.fill()
                colour.setStroke()
                bezier11Path.lineWidth = 1.5
                bezier11Path.stroke()
            }


            if (hasInputs12) {
                //// Bezier 19 Drawing
                let bezier19Path = UIBezierPath()
                bezier19Path.move(to: CGPoint(x: 1, y: 112.14))
                bezier19Path.addLine(to: CGPoint(x: 22.76, y: 112.14))
                UIColor.black.setStroke()
                bezier19Path.lineWidth = 2.5
                bezier19Path.stroke()
            }


            if (hasInputs6) {
                //// Bezier 20 Drawing
                let bezier20Path = UIBezierPath()
                bezier20Path.move(to: CGPoint(x: 1, y: 72.84))
                bezier20Path.addLine(to: CGPoint(x: 23.7, y: 72.84))
                UIColor.black.setStroke()
                bezier20Path.lineWidth = 2.5
                bezier20Path.stroke()
            }


            if (hasInputs8) {
                //// Bezier 23 Drawing
                let bezier23Path = UIBezierPath()
                bezier23Path.move(to: CGPoint(x: 1, y: 85.61))
                bezier23Path.addLine(to: CGPoint(x: 26.54, y: 85.61))
                UIColor.black.setStroke()
                bezier23Path.lineWidth = 2.5
                bezier23Path.stroke()
            }


            if (hasInputs10) {
                //// Bezier 24 Drawing
                let bezier24Path = UIBezierPath()
                bezier24Path.move(to: CGPoint(x: 1, y: 99.37))
                bezier24Path.addLine(to: CGPoint(x: 25.59, y: 99.37))
                UIColor.black.setStroke()
                bezier24Path.lineWidth = 2.5
                bezier24Path.stroke()
            }




            //// Top Or IO
            if (hasInputs5) {
                //// Bezier 12 Drawing
                let bezier12Path = UIBezierPath()
                bezier12Path.move(to: CGPoint(x: 0.95, y: -2.84))
                bezier12Path.addLine(to: CGPoint(x: 22.74, y: -2.84))
                UIColor.black.setStroke()
                bezier12Path.lineWidth = 2.5
                bezier12Path.stroke()
            }


            if (hasInputs11) {
                //// Bezier 13 Drawing
                let bezier13Path = UIBezierPath()
                bezier13Path.move(to: CGPoint(x: 0, y: -42.15))
                bezier13Path.addLine(to: CGPoint(x: 22.74, y: -42.15))
                UIColor.black.setStroke()
                bezier13Path.lineWidth = 2.5
                bezier13Path.stroke()
            }


            if (hasInputs9) {
                //// Bezier 16 Drawing
                let bezier16Path = UIBezierPath()
                bezier16Path.move(to: CGPoint(x: 0.95, y: -29.37))
                bezier16Path.addLine(to: CGPoint(x: 26.53, y: -29.37))
                UIColor.black.setStroke()
                bezier16Path.lineWidth = 2.5
                bezier16Path.stroke()
            }


            if (hasInputs7) {
                //// Bezier 17 Drawing
                let bezier17Path = UIBezierPath()
                bezier17Path.move(to: CGPoint(x: 0.95, y: -15.62))
                bezier17Path.addLine(to: CGPoint(x: 26.53, y: -15.62))
                UIColor.black.setStroke()
                bezier17Path.lineWidth = 2.5
                bezier17Path.stroke()
            }


            if (hasInputsGt4) {
                //// Bezier 9 Drawing
                let bezier9Path = UIBezierPath()
                bezier9Path.move(to: CGPoint(x: 18.38, y: 4.53))
                bezier9Path.addCurve(to: CGPoint(x: 20.56, y: 4.53), controlPoint1: CGPoint(x: 18.38, y: 4.53), controlPoint2: CGPoint(x: 19.2, y: 4.53))
                bezier9Path.addCurve(to: CGPoint(x: 20.56, y: -50.49), controlPoint1: CGPoint(x: 29.78, y: -11.59), controlPoint2: CGPoint(x: 29.78, y: -34.37))
                bezier9Path.addCurve(to: CGPoint(x: 18.97, y: -50.48), controlPoint1: CGPoint(x: 19.99, y: -50.49), controlPoint2: CGPoint(x: 19.46, y: -50.48))
                bezier9Path.addCurve(to: CGPoint(x: 21.4, y: -46.68), controlPoint1: CGPoint(x: 19.83, y: -49.38), controlPoint2: CGPoint(x: 20.64, y: -48.11))
                bezier9Path.addCurve(to: CGPoint(x: 21.4, y: -0.01), controlPoint1: CGPoint(x: 28.31, y: -33.79), controlPoint2: CGPoint(x: 28.31, y: -12.9))
                bezier9Path.addCurve(to: CGPoint(x: 18.38, y: 4.53), controlPoint1: CGPoint(x: 20.47, y: 1.74), controlPoint2: CGPoint(x: 19.45, y: 3.25))
                bezier9Path.addLine(to: CGPoint(x: 18.38, y: 4.53))
                bezier9Path.close()
                colour.setFill()
                bezier9Path.fill()
                colour.setStroke()
                bezier9Path.lineWidth = 1.5
                bezier9Path.stroke()
            }


        }




        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 15, y: 1, width: 87, height: 67)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        Gates.drawOr(frame: CGRect(x: 0, y: 0, width: symbol3Rect.width, height: symbol3Rect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNorGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 129, height: 70), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 129, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 129, y: resizedFrame.height / 70)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs <= 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputsGt4 = inputs > 4
        let hasInputs8 = inputs >= 8
        let hasInputs10 = inputs >= 10
        let hasInputs12 = inputs >= 12
        let hasInputs5 = inputs >= 5
        let hasInputs6 = inputs >= 6
        let hasInputs7 = inputs >= 7
        let hasInputs11 = inputs >= 11
        let hasInputs9 = inputs >= 9

        //// Group
        //// Or IO
        if (hasInputs3) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 1, y: 35))
            bezier2Path.addLine(to: CGPoint(x: 28, y: 35))
            colour.setStroke()
            bezier2Path.lineWidth = 2.5
            bezier2Path.stroke()
        }


        if (hasInputs3or4) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 1, y: 56))
            bezier3Path.addLine(to: CGPoint(x: 24, y: 56))
            colour.setStroke()
            bezier3Path.lineWidth = 2.5
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 1, y: 16))
            bezier4Path.addLine(to: CGPoint(x: 25, y: 16))
            colour.setStroke()
            bezier4Path.lineWidth = 2.5
            bezier4Path.stroke()
        }


        if (hasInputs2) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 0, y: 21))
            bezier5Path.addLine(to: CGPoint(x: 26, y: 21))
            colour.setStroke()
            bezier5Path.lineWidth = 2.5
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 0, y: 51))
            bezier6Path.addLine(to: CGPoint(x: 26, y: 51))
            colour.setStroke()
            bezier6Path.lineWidth = 2.5
            bezier6Path.stroke()
        }


        if (hasInputs4) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 1, y: 29))
            bezier7Path.addLine(to: CGPoint(x: 28, y: 29))
            colour.setStroke()
            bezier7Path.lineWidth = 2.5
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 1, y: 43))
            bezier8Path.addLine(to: CGPoint(x: 28, y: 43))
            colour.setStroke()
            bezier8Path.lineWidth = 2.5
            bezier8Path.stroke()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 113, y: 35))
        bezierPath.addLine(to: CGPoint(x: 123, y: 35))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()




        if (hasInputsGt4) {
            //// Bottom Or IO
            if (hasInputsGt4) {
                //// Bezier 11 Drawing
                let bezier11Path = UIBezierPath()
                bezier11Path.move(to: CGPoint(x: 19.4, y: 121.5))
                bezier11Path.addCurve(to: CGPoint(x: 21.7, y: 121.5), controlPoint1: CGPoint(x: 19.4, y: 121.5), controlPoint2: CGPoint(x: 20.26, y: 121.5))
                bezier11Path.addCurve(to: CGPoint(x: 21.71, y: 65.51), controlPoint1: CGPoint(x: 31.43, y: 105.1), controlPoint2: CGPoint(x: 31.43, y: 81.92))
                bezier11Path.addCurve(to: CGPoint(x: 20.02, y: 65.52), controlPoint1: CGPoint(x: 21.1, y: 65.51), controlPoint2: CGPoint(x: 20.54, y: 65.52))
                bezier11Path.addCurve(to: CGPoint(x: 22.59, y: 69.38), controlPoint1: CGPoint(x: 20.93, y: 66.64), controlPoint2: CGPoint(x: 21.79, y: 67.93))
                bezier11Path.addCurve(to: CGPoint(x: 22.59, y: 116.89), controlPoint1: CGPoint(x: 29.88, y: 82.5), controlPoint2: CGPoint(x: 29.88, y: 103.77))
                bezier11Path.addCurve(to: CGPoint(x: 19.4, y: 121.5), controlPoint1: CGPoint(x: 21.6, y: 118.67), controlPoint2: CGPoint(x: 20.53, y: 120.2))
                bezier11Path.addLine(to: CGPoint(x: 19.4, y: 121.5))
                bezier11Path.close()
                colour.setFill()
                bezier11Path.fill()
                colour.setStroke()
                bezier11Path.lineWidth = 1.5
                bezier11Path.stroke()
            }


            if (hasInputs12) {
                //// Bezier 19 Drawing
                let bezier19Path = UIBezierPath()
                bezier19Path.move(to: CGPoint(x: 1, y: 114))
                bezier19Path.addLine(to: CGPoint(x: 24, y: 114))
                UIColor.black.setStroke()
                bezier19Path.lineWidth = 2.5
                bezier19Path.stroke()
            }


            if (hasInputs6) {
                //// Bezier 20 Drawing
                let bezier20Path = UIBezierPath()
                bezier20Path.move(to: CGPoint(x: 1, y: 74))
                bezier20Path.addLine(to: CGPoint(x: 25, y: 74))
                UIColor.black.setStroke()
                bezier20Path.lineWidth = 2.5
                bezier20Path.stroke()
            }


            if (hasInputs8) {
                //// Bezier 23 Drawing
                let bezier23Path = UIBezierPath()
                bezier23Path.move(to: CGPoint(x: 1, y: 87))
                bezier23Path.addLine(to: CGPoint(x: 28, y: 87))
                UIColor.black.setStroke()
                bezier23Path.lineWidth = 2.5
                bezier23Path.stroke()
            }


            if (hasInputs10) {
                //// Bezier 24 Drawing
                let bezier24Path = UIBezierPath()
                bezier24Path.move(to: CGPoint(x: 1, y: 101))
                bezier24Path.addLine(to: CGPoint(x: 27, y: 101))
                UIColor.black.setStroke()
                bezier24Path.lineWidth = 2.5
                bezier24Path.stroke()
            }




            //// Top Or IO
            if (hasInputs5) {
                //// Bezier 12 Drawing
                let bezier12Path = UIBezierPath()
                bezier12Path.move(to: CGPoint(x: 1, y: -2))
                bezier12Path.addLine(to: CGPoint(x: 24, y: -2))
                UIColor.black.setStroke()
                bezier12Path.lineWidth = 2.5
                bezier12Path.stroke()
            }


            if (hasInputs11) {
                //// Bezier 13 Drawing
                let bezier13Path = UIBezierPath()
                bezier13Path.move(to: CGPoint(x: 0, y: -42))
                bezier13Path.addLine(to: CGPoint(x: 24, y: -42))
                UIColor.black.setStroke()
                bezier13Path.lineWidth = 2.5
                bezier13Path.stroke()
            }


            if (hasInputs9) {
                //// Bezier 16 Drawing
                let bezier16Path = UIBezierPath()
                bezier16Path.move(to: CGPoint(x: 1, y: -29))
                bezier16Path.addLine(to: CGPoint(x: 28, y: -29))
                UIColor.black.setStroke()
                bezier16Path.lineWidth = 2.5
                bezier16Path.stroke()
            }


            if (hasInputs7) {
                //// Bezier 17 Drawing
                let bezier17Path = UIBezierPath()
                bezier17Path.move(to: CGPoint(x: 1, y: -15))
                bezier17Path.addLine(to: CGPoint(x: 28, y: -15))
                UIColor.black.setStroke()
                bezier17Path.lineWidth = 2.5
                bezier17Path.stroke()
            }


            if (hasInputsGt4) {
                //// Bezier 9 Drawing
                let bezier9Path = UIBezierPath()
                bezier9Path.move(to: CGPoint(x: 19.4, y: 5.5))
                bezier9Path.addCurve(to: CGPoint(x: 21.7, y: 5.5), controlPoint1: CGPoint(x: 19.4, y: 5.5), controlPoint2: CGPoint(x: 20.26, y: 5.5))
                bezier9Path.addCurve(to: CGPoint(x: 21.71, y: -50.49), controlPoint1: CGPoint(x: 31.43, y: -10.9), controlPoint2: CGPoint(x: 31.43, y: -34.08))
                bezier9Path.addCurve(to: CGPoint(x: 20.02, y: -50.48), controlPoint1: CGPoint(x: 21.1, y: -50.49), controlPoint2: CGPoint(x: 20.54, y: -50.48))
                bezier9Path.addCurve(to: CGPoint(x: 22.59, y: -46.62), controlPoint1: CGPoint(x: 20.93, y: -49.36), controlPoint2: CGPoint(x: 21.79, y: -48.07))
                bezier9Path.addCurve(to: CGPoint(x: 22.59, y: 0.89), controlPoint1: CGPoint(x: 29.88, y: -33.5), controlPoint2: CGPoint(x: 29.88, y: -12.23))
                bezier9Path.addCurve(to: CGPoint(x: 19.4, y: 5.5), controlPoint1: CGPoint(x: 21.6, y: 2.67), controlPoint2: CGPoint(x: 20.53, y: 4.2))
                bezier9Path.addLine(to: CGPoint(x: 19.4, y: 5.5))
                bezier9Path.close()
                colour.setFill()
                bezier9Path.fill()
                colour.setStroke()
                bezier9Path.lineWidth = 1.5
                bezier9Path.stroke()
            }


        }




        //// Symbol Drawing
        let symbolRect = CGRect(x: 15, y: 2, width: 100, height: 67)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawNor(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawXorGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 123, height: 70), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 123, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 123, y: resizedFrame.height / 70)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs <= 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputsGt4 = inputs > 4
        let hasInputs8 = inputs >= 8
        let hasInputs10 = inputs >= 10
        let hasInputs12 = inputs >= 12
        let hasInputs5 = inputs >= 5
        let hasInputs6 = inputs >= 6
        let hasInputs7 = inputs >= 7
        let hasInputs11 = inputs >= 11
        let hasInputs9 = inputs >= 9

        //// Group
        //// Or IO
        if (hasInputs3) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 0.96, y: 34))
            bezier2Path.addLine(to: CGPoint(x: 19, y: 34))
            colour.setStroke()
            bezier2Path.lineWidth = 2.5
            bezier2Path.stroke()
        }


        if (hasInputs3or4) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 0.96, y: 55))
            bezier3Path.addLine(to: CGPoint(x: 14, y: 55))
            colour.setStroke()
            bezier3Path.lineWidth = 2.5
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 0.96, y: 15))
            bezier4Path.addLine(to: CGPoint(x: 15, y: 15))
            colour.setStroke()
            bezier4Path.lineWidth = 2.5
            bezier4Path.stroke()
        }


        if (hasInputs2) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 0, y: 20))
            bezier5Path.addLine(to: CGPoint(x: 17, y: 20))
            colour.setStroke()
            bezier5Path.lineWidth = 2.5
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 0, y: 50))
            bezier6Path.addLine(to: CGPoint(x: 17, y: 50))
            colour.setStroke()
            bezier6Path.lineWidth = 2.5
            bezier6Path.stroke()
        }


        if (hasInputs4) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 0.96, y: 28))
            bezier7Path.addLine(to: CGPoint(x: 18, y: 28))
            colour.setStroke()
            bezier7Path.lineWidth = 2.5
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 0.96, y: 42))
            bezier8Path.addLine(to: CGPoint(x: 18, y: 42))
            colour.setStroke()
            bezier8Path.lineWidth = 2.5
            bezier8Path.stroke()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 96, y: 34))
        bezierPath.addLine(to: CGPoint(x: 118, y: 34))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()




        if (hasInputsGt4) {
            //// Bottom Or IO
            if (hasInputsGt4) {
                //// Bezier 11 Drawing
                let bezier11Path = UIBezierPath()
                bezier11Path.move(to: CGPoint(x: 18.41, y: 119.51))
                bezier11Path.addCurve(to: CGPoint(x: 20.58, y: 119.51), controlPoint1: CGPoint(x: 18.41, y: 119.51), controlPoint2: CGPoint(x: 19.22, y: 119.51))
                bezier11Path.addCurve(to: CGPoint(x: 20.59, y: 64.51), controlPoint1: CGPoint(x: 29.79, y: 103.4), controlPoint2: CGPoint(x: 29.79, y: 80.62))
                bezier11Path.addCurve(to: CGPoint(x: 18.99, y: 64.51), controlPoint1: CGPoint(x: 20.02, y: 64.51), controlPoint2: CGPoint(x: 19.48, y: 64.51))
                bezier11Path.addCurve(to: CGPoint(x: 21.43, y: 68.31), controlPoint1: CGPoint(x: 19.85, y: 65.62), controlPoint2: CGPoint(x: 20.66, y: 66.88))
                bezier11Path.addCurve(to: CGPoint(x: 21.43, y: 114.98), controlPoint1: CGPoint(x: 28.32, y: 81.19), controlPoint2: CGPoint(x: 28.32, y: 102.09))
                bezier11Path.addCurve(to: CGPoint(x: 18.41, y: 119.51), controlPoint1: CGPoint(x: 20.49, y: 116.72), controlPoint2: CGPoint(x: 19.48, y: 118.24))
                bezier11Path.addLine(to: CGPoint(x: 18.41, y: 119.51))
                bezier11Path.close()
                colour.setFill()
                bezier11Path.fill()
                colour.setStroke()
                bezier11Path.lineWidth = 1.5
                bezier11Path.stroke()
            }


            if (hasInputs12) {
                //// Bezier 19 Drawing
                let bezier19Path = UIBezierPath()
                bezier19Path.move(to: CGPoint(x: 1, y: 112.14))
                bezier19Path.addLine(to: CGPoint(x: 15, y: 112))
                UIColor.black.setStroke()
                bezier19Path.lineWidth = 2.5
                bezier19Path.stroke()
            }


            if (hasInputs6) {
                //// Bezier 20 Drawing
                let bezier20Path = UIBezierPath()
                bezier20Path.move(to: CGPoint(x: 1, y: 72.84))
                bezier20Path.addLine(to: CGPoint(x: 15, y: 73))
                UIColor.black.setStroke()
                bezier20Path.lineWidth = 2.5
                bezier20Path.stroke()
            }


            if (hasInputs8) {
                //// Bezier 23 Drawing
                let bezier23Path = UIBezierPath()
                bezier23Path.move(to: CGPoint(x: 1, y: 86))
                bezier23Path.addLine(to: CGPoint(x: 19, y: 86))
                UIColor.black.setStroke()
                bezier23Path.lineWidth = 2.5
                bezier23Path.stroke()
            }


            if (hasInputs10) {
                //// Bezier 24 Drawing
                let bezier24Path = UIBezierPath()
                bezier24Path.move(to: CGPoint(x: 1, y: 99))
                bezier24Path.addLine(to: CGPoint(x: 17, y: 99))
                UIColor.black.setStroke()
                bezier24Path.lineWidth = 2.5
                bezier24Path.stroke()
            }


            if (hasInputsGt4) {
                //// Bezier 10 Drawing
                let bezier10Path = UIBezierPath()
                bezier10Path.move(to: CGPoint(x: 9.41, y: 119.51))
                bezier10Path.addCurve(to: CGPoint(x: 11.58, y: 119.51), controlPoint1: CGPoint(x: 9.41, y: 119.51), controlPoint2: CGPoint(x: 10.22, y: 119.51))
                bezier10Path.addCurve(to: CGPoint(x: 11.59, y: 63.51), controlPoint1: CGPoint(x: 20.79, y: 103.1), controlPoint2: CGPoint(x: 20.79, y: 79.92))
                bezier10Path.addCurve(to: CGPoint(x: 9.99, y: 63.51), controlPoint1: CGPoint(x: 11.02, y: 63.51), controlPoint2: CGPoint(x: 10.48, y: 63.51))
                bezier10Path.addCurve(to: CGPoint(x: 12.43, y: 67.38), controlPoint1: CGPoint(x: 10.85, y: 64.64), controlPoint2: CGPoint(x: 11.66, y: 65.93))
                bezier10Path.addCurve(to: CGPoint(x: 12.43, y: 114.89), controlPoint1: CGPoint(x: 19.32, y: 80.5), controlPoint2: CGPoint(x: 19.32, y: 101.77))
                bezier10Path.addCurve(to: CGPoint(x: 9.41, y: 119.51), controlPoint1: CGPoint(x: 11.49, y: 116.67), controlPoint2: CGPoint(x: 10.48, y: 118.21))
                bezier10Path.addLine(to: CGPoint(x: 9.41, y: 119.51))
                bezier10Path.close()
                colour.setFill()
                bezier10Path.fill()
                colour.setStroke()
                bezier10Path.lineWidth = 1.5
                bezier10Path.stroke()
            }




            //// Top Or IO
            if (hasInputs5) {
                //// Bezier 12 Drawing
                let bezier12Path = UIBezierPath()
                bezier12Path.move(to: CGPoint(x: 0.95, y: -2.84))
                bezier12Path.addLine(to: CGPoint(x: 14, y: -3))
                UIColor.black.setStroke()
                bezier12Path.lineWidth = 2.5
                bezier12Path.stroke()
            }


            if (hasInputs11) {
                //// Bezier 13 Drawing
                let bezier13Path = UIBezierPath()
                bezier13Path.move(to: CGPoint(x: 0, y: -42.15))
                bezier13Path.addLine(to: CGPoint(x: 15, y: -42))
                UIColor.black.setStroke()
                bezier13Path.lineWidth = 2.5
                bezier13Path.stroke()
            }


            if (hasInputs9) {
                //// Bezier 16 Drawing
                let bezier16Path = UIBezierPath()
                bezier16Path.move(to: CGPoint(x: 0, y: -29))
                bezier16Path.addLine(to: CGPoint(x: 18, y: -29))
                UIColor.black.setStroke()
                bezier16Path.lineWidth = 2.5
                bezier16Path.stroke()
            }


            if (hasInputs7) {
                //// Bezier 17 Drawing
                let bezier17Path = UIBezierPath()
                bezier17Path.move(to: CGPoint(x: 0, y: -16))
                bezier17Path.addLine(to: CGPoint(x: 17, y: -16))
                UIColor.black.setStroke()
                bezier17Path.lineWidth = 2.5
                bezier17Path.stroke()
            }


            if (hasInputsGt4) {
                //// Bezier 9 Drawing
                let bezier9Path = UIBezierPath()
                bezier9Path.move(to: CGPoint(x: 18.38, y: 4.51))
                bezier9Path.addCurve(to: CGPoint(x: 20.53, y: 4.51), controlPoint1: CGPoint(x: 18.38, y: 4.51), controlPoint2: CGPoint(x: 19.19, y: 4.51))
                bezier9Path.addCurve(to: CGPoint(x: 20.54, y: -50.49), controlPoint1: CGPoint(x: 29.66, y: -11.6), controlPoint2: CGPoint(x: 29.66, y: -34.37))
                bezier9Path.addCurve(to: CGPoint(x: 18.96, y: -50.48), controlPoint1: CGPoint(x: 19.98, y: -50.49), controlPoint2: CGPoint(x: 19.45, y: -50.48))
                bezier9Path.addCurve(to: CGPoint(x: 21.37, y: -46.68), controlPoint1: CGPoint(x: 19.81, y: -49.38), controlPoint2: CGPoint(x: 20.62, y: -48.11))
                bezier9Path.addCurve(to: CGPoint(x: 21.37, y: -0.02), controlPoint1: CGPoint(x: 28.21, y: -33.8), controlPoint2: CGPoint(x: 28.21, y: -12.9))
                bezier9Path.addCurve(to: CGPoint(x: 18.38, y: 4.51), controlPoint1: CGPoint(x: 20.45, y: 1.73), controlPoint2: CGPoint(x: 19.44, y: 3.24))
                bezier9Path.addLine(to: CGPoint(x: 18.38, y: 4.51))
                bezier9Path.close()
                colour.setFill()
                bezier9Path.fill()
                colour.setStroke()
                bezier9Path.lineWidth = 1.5
                bezier9Path.stroke()


                //// Bezier 15 Drawing
                let bezier15Path = UIBezierPath()
                bezier15Path.move(to: CGPoint(x: 9.38, y: 5.51))
                bezier15Path.addCurve(to: CGPoint(x: 11.53, y: 5.51), controlPoint1: CGPoint(x: 9.38, y: 5.51), controlPoint2: CGPoint(x: 10.19, y: 5.51))
                bezier15Path.addCurve(to: CGPoint(x: 11.54, y: -50.49), controlPoint1: CGPoint(x: 20.66, y: -10.9), controlPoint2: CGPoint(x: 20.66, y: -34.08))
                bezier15Path.addCurve(to: CGPoint(x: 9.96, y: -50.49), controlPoint1: CGPoint(x: 10.98, y: -50.49), controlPoint2: CGPoint(x: 10.45, y: -50.49))
                bezier15Path.addCurve(to: CGPoint(x: 12.37, y: -46.62), controlPoint1: CGPoint(x: 10.81, y: -49.36), controlPoint2: CGPoint(x: 11.62, y: -48.07))
                bezier15Path.addCurve(to: CGPoint(x: 12.37, y: 0.9), controlPoint1: CGPoint(x: 19.21, y: -33.5), controlPoint2: CGPoint(x: 19.21, y: -12.23))
                bezier15Path.addCurve(to: CGPoint(x: 9.38, y: 5.51), controlPoint1: CGPoint(x: 11.45, y: 2.67), controlPoint2: CGPoint(x: 10.44, y: 4.21))
                bezier15Path.addLine(to: CGPoint(x: 9.38, y: 5.51))
                bezier15Path.close()
                colour.setFill()
                bezier15Path.fill()
                colour.setStroke()
                bezier15Path.lineWidth = 1.5
                bezier15Path.stroke()
            }


        }




        //// Symbol Drawing
        let symbolRect = CGRect(x: 5, y: 1, width: 97, height: 67)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawExOr(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawXnorGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 123, height: 70), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 123, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 123, y: resizedFrame.height / 70)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs <= 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputsGt4 = inputs > 4
        let hasInputs8 = inputs >= 8
        let hasInputs10 = inputs >= 10
        let hasInputs12 = inputs >= 12
        let hasInputs5 = inputs >= 5
        let hasInputs6 = inputs >= 6
        let hasInputs7 = inputs >= 7
        let hasInputs11 = inputs >= 11
        let hasInputs9 = inputs >= 9

        //// Group
        //// Or IO
        if (hasInputs3) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 0.96, y: 34))
            bezier2Path.addLine(to: CGPoint(x: 19, y: 34))
            colour.setStroke()
            bezier2Path.lineWidth = 2.5
            bezier2Path.stroke()
        }


        if (hasInputs3or4) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 0.96, y: 55))
            bezier3Path.addLine(to: CGPoint(x: 14, y: 55))
            colour.setStroke()
            bezier3Path.lineWidth = 2.5
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 0.96, y: 15))
            bezier4Path.addLine(to: CGPoint(x: 15, y: 15))
            colour.setStroke()
            bezier4Path.lineWidth = 2.5
            bezier4Path.stroke()
        }


        if (hasInputs2) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 0, y: 20))
            bezier5Path.addLine(to: CGPoint(x: 17, y: 20))
            colour.setStroke()
            bezier5Path.lineWidth = 2.5
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 0, y: 50))
            bezier6Path.addLine(to: CGPoint(x: 17, y: 50))
            colour.setStroke()
            bezier6Path.lineWidth = 2.5
            bezier6Path.stroke()
        }


        if (hasInputs4) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 0.96, y: 28))
            bezier7Path.addLine(to: CGPoint(x: 18, y: 28))
            colour.setStroke()
            bezier7Path.lineWidth = 2.5
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 0.96, y: 42))
            bezier8Path.addLine(to: CGPoint(x: 18, y: 42))
            colour.setStroke()
            bezier8Path.lineWidth = 2.5
            bezier8Path.stroke()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 112, y: 34))
        bezierPath.addLine(to: CGPoint(x: 118, y: 34))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()




        if (hasInputsGt4) {
            //// Bottom Or IO
            //// Bezier 11 Drawing
            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: 18.41, y: 119.51))
            bezier11Path.addCurve(to: CGPoint(x: 20.58, y: 119.51), controlPoint1: CGPoint(x: 18.41, y: 119.51), controlPoint2: CGPoint(x: 19.22, y: 119.51))
            bezier11Path.addCurve(to: CGPoint(x: 20.59, y: 64.51), controlPoint1: CGPoint(x: 29.79, y: 103.4), controlPoint2: CGPoint(x: 29.79, y: 80.62))
            bezier11Path.addCurve(to: CGPoint(x: 18.99, y: 64.51), controlPoint1: CGPoint(x: 20.02, y: 64.51), controlPoint2: CGPoint(x: 19.48, y: 64.51))
            bezier11Path.addCurve(to: CGPoint(x: 21.43, y: 68.31), controlPoint1: CGPoint(x: 19.85, y: 65.62), controlPoint2: CGPoint(x: 20.66, y: 66.88))
            bezier11Path.addCurve(to: CGPoint(x: 21.43, y: 114.98), controlPoint1: CGPoint(x: 28.32, y: 81.19), controlPoint2: CGPoint(x: 28.32, y: 102.09))
            bezier11Path.addCurve(to: CGPoint(x: 18.41, y: 119.51), controlPoint1: CGPoint(x: 20.49, y: 116.72), controlPoint2: CGPoint(x: 19.48, y: 118.24))
            bezier11Path.addLine(to: CGPoint(x: 18.41, y: 119.51))
            bezier11Path.close()
            colour.setFill()
            bezier11Path.fill()
            colour.setStroke()
            bezier11Path.lineWidth = 1.5
            bezier11Path.stroke()


            if (hasInputs12) {
                //// Bezier 19 Drawing
                let bezier19Path = UIBezierPath()
                bezier19Path.move(to: CGPoint(x: 1, y: 112.14))
                bezier19Path.addLine(to: CGPoint(x: 15, y: 112))
                UIColor.black.setStroke()
                bezier19Path.lineWidth = 2.5
                bezier19Path.stroke()
            }


            if (hasInputs6) {
                //// Bezier 20 Drawing
                let bezier20Path = UIBezierPath()
                bezier20Path.move(to: CGPoint(x: 1, y: 72.84))
                bezier20Path.addLine(to: CGPoint(x: 15, y: 73))
                UIColor.black.setStroke()
                bezier20Path.lineWidth = 2.5
                bezier20Path.stroke()
            }


            if (hasInputs8) {
                //// Bezier 23 Drawing
                let bezier23Path = UIBezierPath()
                bezier23Path.move(to: CGPoint(x: 1, y: 86))
                bezier23Path.addLine(to: CGPoint(x: 19, y: 86))
                UIColor.black.setStroke()
                bezier23Path.lineWidth = 2.5
                bezier23Path.stroke()
            }


            if (hasInputs10) {
                //// Bezier 24 Drawing
                let bezier24Path = UIBezierPath()
                bezier24Path.move(to: CGPoint(x: 1, y: 99))
                bezier24Path.addLine(to: CGPoint(x: 17, y: 99))
                UIColor.black.setStroke()
                bezier24Path.lineWidth = 2.5
                bezier24Path.stroke()
            }


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 9.41, y: 119.51))
            bezier10Path.addCurve(to: CGPoint(x: 11.58, y: 119.51), controlPoint1: CGPoint(x: 9.41, y: 119.51), controlPoint2: CGPoint(x: 10.22, y: 119.51))
            bezier10Path.addCurve(to: CGPoint(x: 11.59, y: 63.51), controlPoint1: CGPoint(x: 20.79, y: 103.1), controlPoint2: CGPoint(x: 20.79, y: 79.92))
            bezier10Path.addCurve(to: CGPoint(x: 9.99, y: 63.51), controlPoint1: CGPoint(x: 11.02, y: 63.51), controlPoint2: CGPoint(x: 10.48, y: 63.51))
            bezier10Path.addCurve(to: CGPoint(x: 12.43, y: 67.38), controlPoint1: CGPoint(x: 10.85, y: 64.64), controlPoint2: CGPoint(x: 11.66, y: 65.93))
            bezier10Path.addCurve(to: CGPoint(x: 12.43, y: 114.89), controlPoint1: CGPoint(x: 19.32, y: 80.5), controlPoint2: CGPoint(x: 19.32, y: 101.77))
            bezier10Path.addCurve(to: CGPoint(x: 9.41, y: 119.51), controlPoint1: CGPoint(x: 11.49, y: 116.67), controlPoint2: CGPoint(x: 10.48, y: 118.21))
            bezier10Path.addLine(to: CGPoint(x: 9.41, y: 119.51))
            bezier10Path.close()
            colour.setFill()
            bezier10Path.fill()
            colour.setStroke()
            bezier10Path.lineWidth = 1.5
            bezier10Path.stroke()




            //// Top Or IO
            if (hasInputs5) {
                //// Bezier 12 Drawing
                let bezier12Path = UIBezierPath()
                bezier12Path.move(to: CGPoint(x: 0.95, y: -2.84))
                bezier12Path.addLine(to: CGPoint(x: 14, y: -3))
                UIColor.black.setStroke()
                bezier12Path.lineWidth = 2.5
                bezier12Path.stroke()
            }


            if (hasInputs11) {
                //// Bezier 13 Drawing
                let bezier13Path = UIBezierPath()
                bezier13Path.move(to: CGPoint(x: 0, y: -42.15))
                bezier13Path.addLine(to: CGPoint(x: 15, y: -42))
                UIColor.black.setStroke()
                bezier13Path.lineWidth = 2.5
                bezier13Path.stroke()
            }


            if (hasInputs9) {
                //// Bezier 16 Drawing
                let bezier16Path = UIBezierPath()
                bezier16Path.move(to: CGPoint(x: 0, y: -29))
                bezier16Path.addLine(to: CGPoint(x: 18, y: -29))
                UIColor.black.setStroke()
                bezier16Path.lineWidth = 2.5
                bezier16Path.stroke()
            }


            if (hasInputs7) {
                //// Bezier 17 Drawing
                let bezier17Path = UIBezierPath()
                bezier17Path.move(to: CGPoint(x: 0, y: -16))
                bezier17Path.addLine(to: CGPoint(x: 17, y: -16))
                UIColor.black.setStroke()
                bezier17Path.lineWidth = 2.5
                bezier17Path.stroke()
            }


            if (hasInputsGt4) {
                //// Bezier 9 Drawing
                let bezier9Path = UIBezierPath()
                bezier9Path.move(to: CGPoint(x: 18.38, y: 4.51))
                bezier9Path.addCurve(to: CGPoint(x: 20.53, y: 4.51), controlPoint1: CGPoint(x: 18.38, y: 4.51), controlPoint2: CGPoint(x: 19.19, y: 4.51))
                bezier9Path.addCurve(to: CGPoint(x: 20.54, y: -50.49), controlPoint1: CGPoint(x: 29.66, y: -11.6), controlPoint2: CGPoint(x: 29.66, y: -34.37))
                bezier9Path.addCurve(to: CGPoint(x: 18.96, y: -50.48), controlPoint1: CGPoint(x: 19.98, y: -50.49), controlPoint2: CGPoint(x: 19.45, y: -50.48))
                bezier9Path.addCurve(to: CGPoint(x: 21.37, y: -46.68), controlPoint1: CGPoint(x: 19.81, y: -49.38), controlPoint2: CGPoint(x: 20.62, y: -48.11))
                bezier9Path.addCurve(to: CGPoint(x: 21.37, y: -0.02), controlPoint1: CGPoint(x: 28.21, y: -33.8), controlPoint2: CGPoint(x: 28.21, y: -12.9))
                bezier9Path.addCurve(to: CGPoint(x: 18.38, y: 4.51), controlPoint1: CGPoint(x: 20.45, y: 1.73), controlPoint2: CGPoint(x: 19.44, y: 3.24))
                bezier9Path.addLine(to: CGPoint(x: 18.38, y: 4.51))
                bezier9Path.close()
                colour.setFill()
                bezier9Path.fill()
                colour.setStroke()
                bezier9Path.lineWidth = 1.5
                bezier9Path.stroke()


                //// Bezier 15 Drawing
                let bezier15Path = UIBezierPath()
                bezier15Path.move(to: CGPoint(x: 9.38, y: 5.51))
                bezier15Path.addCurve(to: CGPoint(x: 11.53, y: 5.51), controlPoint1: CGPoint(x: 9.38, y: 5.51), controlPoint2: CGPoint(x: 10.19, y: 5.51))
                bezier15Path.addCurve(to: CGPoint(x: 11.54, y: -50.49), controlPoint1: CGPoint(x: 20.66, y: -10.9), controlPoint2: CGPoint(x: 20.66, y: -34.08))
                bezier15Path.addCurve(to: CGPoint(x: 9.96, y: -50.49), controlPoint1: CGPoint(x: 10.98, y: -50.49), controlPoint2: CGPoint(x: 10.45, y: -50.49))
                bezier15Path.addCurve(to: CGPoint(x: 12.37, y: -46.62), controlPoint1: CGPoint(x: 10.81, y: -49.36), controlPoint2: CGPoint(x: 11.62, y: -48.07))
                bezier15Path.addCurve(to: CGPoint(x: 12.37, y: 0.9), controlPoint1: CGPoint(x: 19.21, y: -33.5), controlPoint2: CGPoint(x: 19.21, y: -12.23))
                bezier15Path.addCurve(to: CGPoint(x: 9.38, y: 5.51), controlPoint1: CGPoint(x: 11.45, y: 2.67), controlPoint2: CGPoint(x: 10.44, y: 4.21))
                bezier15Path.addLine(to: CGPoint(x: 9.38, y: 5.51))
                bezier15Path.close()
                colour.setFill()
                bezier15Path.fill()
                colour.setStroke()
                bezier15Path.lineWidth = 1.5
                bezier15Path.stroke()
            }


        }




        //// Symbol Drawing
        let symbolRect = CGRect(x: 5, y: 1, width: 110, height: 67)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawExNor(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBufferGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 93, height: 57), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 93, height: 57), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 93, y: resizedFrame.height / 57)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group 2
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 28))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 28))
        colour.setStroke()
        bezier2Path.lineWidth = 2.5
        bezier2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 71, y: 28))
        bezierPath.addLine(to: CGPoint(x: 93, y: 28))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 23, y: 0, width: 49, height: 57)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawBuffer(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawInverterGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 93, height: 57), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 93, height: 57), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 93, y: resizedFrame.height / 57)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group
        //// Or IO
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0, y: 28))
        bezier2Path.addLine(to: CGPoint(x: 29, y: 28))
        colour.setStroke()
        bezier2Path.lineWidth = 2.5
        bezier2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 85, y: 28))
        bezierPath.addLine(to: CGPoint(x: 93, y: 28))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()






        //// Symbol Drawing
        let symbolRect = CGRect(x: 22, y: 0, width: 65, height: 57)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawInverter(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAndGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 123, height: 70), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 123, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 123, y: resizedFrame.height / 70)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs <= 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputsGt4 = inputs > 4
        let hasInputs8 = inputs >= 8
        let hasInputs10 = inputs >= 10
        let hasInputs12 = inputs >= 12
        let hasInputs5 = inputs >= 5
        let hasInputs6 = inputs >= 6
        let hasInputs7 = inputs >= 7
        let hasInputs11 = inputs >= 11
        let hasInputs9 = inputs >= 9

        //// Group
        //// And IO
        if (hasInputs3) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 0.96, y: 34))
            bezier2Path.addLine(to: CGPoint(x: 25, y: 34))
            colour.setStroke()
            bezier2Path.lineWidth = 2.5
            bezier2Path.stroke()
        }


        if (hasInputs3or4) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 0.96, y: 55))
            bezier3Path.addLine(to: CGPoint(x: 23.02, y: 55))
            colour.setStroke()
            bezier3Path.lineWidth = 2.5
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 0.96, y: 15))
            bezier4Path.addLine(to: CGPoint(x: 23.98, y: 15))
            colour.setStroke()
            bezier4Path.lineWidth = 2.5
            bezier4Path.stroke()
        }


        if (hasInputs2) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 0, y: 20))
            bezier5Path.addLine(to: CGPoint(x: 24.94, y: 20))
            colour.setStroke()
            bezier5Path.lineWidth = 2.5
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 0, y: 50))
            bezier6Path.addLine(to: CGPoint(x: 24.94, y: 50))
            colour.setStroke()
            bezier6Path.lineWidth = 2.5
            bezier6Path.stroke()
        }


        if (hasInputs4) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 0.96, y: 28))
            bezier7Path.addLine(to: CGPoint(x: 24, y: 28))
            colour.setStroke()
            bezier7Path.lineWidth = 2.5
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 0.96, y: 42))
            bezier8Path.addLine(to: CGPoint(x: 24, y: 42))
            colour.setStroke()
            bezier8Path.lineWidth = 2.5
            bezier8Path.stroke()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 96, y: 34))
        bezierPath.addLine(to: CGPoint(x: 118, y: 34))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()




        if (hasInputsGt4) {
            //// Bottom And IO
            if (hasInputs12) {
                //// Bezier 19 Drawing
                let bezier19Path = UIBezierPath()
                bezier19Path.move(to: CGPoint(x: 1, y: 112))
                bezier19Path.addLine(to: CGPoint(x: 22.76, y: 112.14))
                UIColor.black.setStroke()
                bezier19Path.lineWidth = 2.5
                bezier19Path.stroke()
            }


            if (hasInputs6) {
                //// Bezier 20 Drawing
                let bezier20Path = UIBezierPath()
                bezier20Path.move(to: CGPoint(x: 1, y: 72.84))
                bezier20Path.addLine(to: CGPoint(x: 23.7, y: 72.84))
                UIColor.black.setStroke()
                bezier20Path.lineWidth = 2.5
                bezier20Path.stroke()
            }


            if (hasInputs8) {
                //// Bezier 23 Drawing
                let bezier23Path = UIBezierPath()
                bezier23Path.move(to: CGPoint(x: 1, y: 86))
                bezier23Path.addLine(to: CGPoint(x: 24, y: 86))
                UIColor.black.setStroke()
                bezier23Path.lineWidth = 2.5
                bezier23Path.stroke()
            }


            if (hasInputs10) {
                //// Bezier 24 Drawing
                let bezier24Path = UIBezierPath()
                bezier24Path.move(to: CGPoint(x: 1, y: 99))
                bezier24Path.addLine(to: CGPoint(x: 24, y: 99))
                UIColor.black.setStroke()
                bezier24Path.lineWidth = 2.5
                bezier24Path.stroke()
            }


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 24, y: 120))
            bezier14Path.addLine(to: CGPoint(x: 24, y: 64))
            UIColor.black.setStroke()
            bezier14Path.lineWidth = 2.5
            bezier14Path.stroke()




            //// Top And IO
            if (hasInputs5) {
                //// Bezier 12 Drawing
                let bezier12Path = UIBezierPath()
                bezier12Path.move(to: CGPoint(x: 0.95, y: -2.84))
                bezier12Path.addLine(to: CGPoint(x: 24, y: -3))
                UIColor.black.setStroke()
                bezier12Path.lineWidth = 2.5
                bezier12Path.stroke()
            }


            if (hasInputs11) {
                //// Bezier 13 Drawing
                let bezier13Path = UIBezierPath()
                bezier13Path.move(to: CGPoint(x: 1, y: -42))
                bezier13Path.addLine(to: CGPoint(x: 23, y: -42))
                UIColor.black.setStroke()
                bezier13Path.lineWidth = 2.5
                bezier13Path.stroke()
            }


            if (hasInputs9) {
                //// Bezier 16 Drawing
                let bezier16Path = UIBezierPath()
                bezier16Path.move(to: CGPoint(x: 1, y: -29))
                bezier16Path.addLine(to: CGPoint(x: 24, y: -29))
                UIColor.black.setStroke()
                bezier16Path.lineWidth = 2.5
                bezier16Path.stroke()
            }


            if (hasInputs7) {
                //// Bezier 17 Drawing
                let bezier17Path = UIBezierPath()
                bezier17Path.move(to: CGPoint(x: 1, y: -16))
                bezier17Path.addLine(to: CGPoint(x: 24, y: -16))
                UIColor.black.setStroke()
                bezier17Path.lineWidth = 2.5
                bezier17Path.stroke()
            }


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 24, y: 6))
            bezier10Path.addLine(to: CGPoint(x: 24, y: -50.01))
            UIColor.black.setStroke()
            bezier10Path.lineWidth = 2.5
            bezier10Path.stroke()


        }




        //// Symbol Drawing
        let symbolRect = CGRect(x: 17, y: 1, width: 86, height: 68)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawAnd(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNandGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 123, height: 70), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 123, height: 70), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 123, y: resizedFrame.height / 70)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs <= 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputsGt4 = inputs > 4
        let hasInputs8 = inputs >= 8
        let hasInputs10 = inputs >= 10
        let hasInputs12 = inputs >= 12
        let hasInputs5 = inputs >= 5
        let hasInputs6 = inputs >= 6
        let hasInputs7 = inputs >= 7
        let hasInputs11 = inputs >= 11
        let hasInputs9 = inputs >= 9

        //// Group
        //// And IO
        if (hasInputs3) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 0.96, y: 34))
            bezier2Path.addLine(to: CGPoint(x: 25, y: 34))
            colour.setStroke()
            bezier2Path.lineWidth = 2.5
            bezier2Path.stroke()
        }


        if (hasInputs3or4) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 0.96, y: 55))
            bezier3Path.addLine(to: CGPoint(x: 23.02, y: 55))
            colour.setStroke()
            bezier3Path.lineWidth = 2.5
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 0.96, y: 15))
            bezier4Path.addLine(to: CGPoint(x: 23.98, y: 15))
            colour.setStroke()
            bezier4Path.lineWidth = 2.5
            bezier4Path.stroke()
        }


        if (hasInputs2) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 0, y: 20))
            bezier5Path.addLine(to: CGPoint(x: 24.94, y: 20))
            colour.setStroke()
            bezier5Path.lineWidth = 2.5
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 0, y: 50))
            bezier6Path.addLine(to: CGPoint(x: 24.94, y: 50))
            colour.setStroke()
            bezier6Path.lineWidth = 2.5
            bezier6Path.stroke()
        }


        if (hasInputs4) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 0.96, y: 28))
            bezier7Path.addLine(to: CGPoint(x: 24, y: 28))
            colour.setStroke()
            bezier7Path.lineWidth = 2.5
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 0.96, y: 42))
            bezier8Path.addLine(to: CGPoint(x: 24, y: 42))
            colour.setStroke()
            bezier8Path.lineWidth = 2.5
            bezier8Path.stroke()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 112, y: 34))
        bezierPath.addLine(to: CGPoint(x: 118, y: 34))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()




        if (hasInputsGt4) {
            //// Bottom And IO
            if (hasInputs12) {
                //// Bezier 19 Drawing
                let bezier19Path = UIBezierPath()
                bezier19Path.move(to: CGPoint(x: 1, y: 112))
                bezier19Path.addLine(to: CGPoint(x: 22.76, y: 112.14))
                UIColor.black.setStroke()
                bezier19Path.lineWidth = 2.5
                bezier19Path.stroke()
            }


            if (hasInputs6) {
                //// Bezier 20 Drawing
                let bezier20Path = UIBezierPath()
                bezier20Path.move(to: CGPoint(x: 1, y: 72.84))
                bezier20Path.addLine(to: CGPoint(x: 23.7, y: 72.84))
                UIColor.black.setStroke()
                bezier20Path.lineWidth = 2.5
                bezier20Path.stroke()
            }


            if (hasInputs8) {
                //// Bezier 23 Drawing
                let bezier23Path = UIBezierPath()
                bezier23Path.move(to: CGPoint(x: 1, y: 86))
                bezier23Path.addLine(to: CGPoint(x: 24, y: 86))
                UIColor.black.setStroke()
                bezier23Path.lineWidth = 2.5
                bezier23Path.stroke()
            }


            if (hasInputs10) {
                //// Bezier 24 Drawing
                let bezier24Path = UIBezierPath()
                bezier24Path.move(to: CGPoint(x: 1, y: 99))
                bezier24Path.addLine(to: CGPoint(x: 24, y: 99))
                UIColor.black.setStroke()
                bezier24Path.lineWidth = 2.5
                bezier24Path.stroke()
            }


            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: 24, y: 120))
            bezier14Path.addLine(to: CGPoint(x: 24, y: 64))
            UIColor.black.setStroke()
            bezier14Path.lineWidth = 2.5
            bezier14Path.stroke()




            //// Top And IO
            if (hasInputs5) {
                //// Bezier 12 Drawing
                let bezier12Path = UIBezierPath()
                bezier12Path.move(to: CGPoint(x: 0.95, y: -2.84))
                bezier12Path.addLine(to: CGPoint(x: 24, y: -3))
                UIColor.black.setStroke()
                bezier12Path.lineWidth = 2.5
                bezier12Path.stroke()
            }


            if (hasInputs11) {
                //// Bezier 13 Drawing
                let bezier13Path = UIBezierPath()
                bezier13Path.move(to: CGPoint(x: 1, y: -42))
                bezier13Path.addLine(to: CGPoint(x: 23, y: -42))
                UIColor.black.setStroke()
                bezier13Path.lineWidth = 2.5
                bezier13Path.stroke()
            }


            if (hasInputs9) {
                //// Bezier 16 Drawing
                let bezier16Path = UIBezierPath()
                bezier16Path.move(to: CGPoint(x: 1, y: -29))
                bezier16Path.addLine(to: CGPoint(x: 24, y: -29))
                UIColor.black.setStroke()
                bezier16Path.lineWidth = 2.5
                bezier16Path.stroke()
            }


            if (hasInputs7) {
                //// Bezier 17 Drawing
                let bezier17Path = UIBezierPath()
                bezier17Path.move(to: CGPoint(x: 1, y: -16))
                bezier17Path.addLine(to: CGPoint(x: 24, y: -16))
                UIColor.black.setStroke()
                bezier17Path.lineWidth = 2.5
                bezier17Path.stroke()
            }


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: 24, y: 6))
            bezier10Path.addLine(to: CGPoint(x: 24, y: -50.01))
            UIColor.black.setStroke()
            bezier10Path.lineWidth = 2.5
            bezier10Path.stroke()


        }




        //// Symbol Drawing
        let symbolRect = CGRect(x: 17, y: 1, width: 98, height: 68)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        Gates.drawNand(frame: CGRect(x: 0, y: 0, width: symbolRect.width, height: symbolRect.height), highlight: highlight)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBlockGate(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 123, height: 115), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputs: CGFloat = 4) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 123, height: 115), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 123, y: resizedFrame.height / 115)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let hasInputs2 = inputs <= 2
        let hasInputs3 = inputs == 3
        let hasInputs4 = inputs >= 4
        let hasInputs3or4 = hasInputs3 || hasInputs4
        let hasInputsGt4 = inputs > 4
        let hasInputs5 = inputs >= 5
        let hasInputs6 = inputs >= 6

        //// Group
        //// And IO
        if (hasInputs3) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: 0.96, y: 56))
            bezier2Path.addLine(to: CGPoint(x: 25, y: 56))
            colour.setStroke()
            bezier2Path.lineWidth = 2.5
            bezier2Path.stroke()
        }


        if (hasInputs3or4) {
            //// Bezier 3 Drawing
            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: 0.96, y: 77))
            bezier3Path.addLine(to: CGPoint(x: 23.02, y: 77))
            colour.setStroke()
            bezier3Path.lineWidth = 2.5
            bezier3Path.stroke()


            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: 0.96, y: 37))
            bezier4Path.addLine(to: CGPoint(x: 23.98, y: 37))
            colour.setStroke()
            bezier4Path.lineWidth = 2.5
            bezier4Path.stroke()
        }


        if (hasInputs2) {
            //// Bezier 5 Drawing
            let bezier5Path = UIBezierPath()
            bezier5Path.move(to: CGPoint(x: 0, y: 42))
            bezier5Path.addLine(to: CGPoint(x: 24.94, y: 42))
            colour.setStroke()
            bezier5Path.lineWidth = 2.5
            bezier5Path.stroke()


            //// Bezier 6 Drawing
            let bezier6Path = UIBezierPath()
            bezier6Path.move(to: CGPoint(x: 0, y: 72))
            bezier6Path.addLine(to: CGPoint(x: 24.94, y: 72))
            colour.setStroke()
            bezier6Path.lineWidth = 2.5
            bezier6Path.stroke()
        }


        if (hasInputs4) {
            //// Bezier 7 Drawing
            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: 0.96, y: 50))
            bezier7Path.addLine(to: CGPoint(x: 24, y: 50))
            colour.setStroke()
            bezier7Path.lineWidth = 2.5
            bezier7Path.stroke()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: 0.96, y: 64))
            bezier8Path.addLine(to: CGPoint(x: 24, y: 64))
            colour.setStroke()
            bezier8Path.lineWidth = 2.5
            bezier8Path.stroke()
        }


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 96, y: 56))
        bezierPath.addLine(to: CGPoint(x: 118, y: 56))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()




        if (hasInputsGt4) {
            //// Bottom And IO
            if (hasInputs6) {
                //// Bezier 20 Drawing
                let bezier20Path = UIBezierPath()
                bezier20Path.move(to: CGPoint(x: 1, y: 94.84))
                bezier20Path.addLine(to: CGPoint(x: 23.7, y: 94.84))
                colour.setStroke()
                bezier20Path.lineWidth = 2.5
                bezier20Path.stroke()
            }




            //// Top And IO
            if (hasInputs5) {
                //// Bezier 12 Drawing
                let bezier12Path = UIBezierPath()
                bezier12Path.move(to: CGPoint(x: 0.95, y: 19.16))
                bezier12Path.addLine(to: CGPoint(x: 24, y: 19))
                colour.setStroke()
                bezier12Path.lineWidth = 2.5
                bezier12Path.stroke()
            }


        }




        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 24, y: 6, width: 72, height: 102))
        colour.setStroke()
        rectanglePath.lineWidth = 2.5
        rectanglePath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawConnection(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 88, height: 57), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 88, height: 57), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 88, y: resizedFrame.height / 57)



        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10, y: 41))
        bezierPath.addLine(to: CGPoint(x: 44, y: 41))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.lineCapStyle = .square
        bezierPath.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 44, y: 42))
        bezier3Path.addLine(to: CGPoint(x: 44, y: 15))
        colour.setStroke()
        bezier3Path.lineWidth = 2.5
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 44, y: 16))
        bezier4Path.addLine(to: CGPoint(x: 79, y: 16))
        colour.setStroke()
        bezier4Path.lineWidth = 2.5
        bezier4Path.lineCapStyle = .square
        bezier4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 61), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputText: String = "1") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 86, height: 61), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 86, y: resizedFrame.height / 61)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 86, resizedFrame.height / 61)


        //// Color Declarations
        let buttonHi = UIColor(red: 0.290, green: 0.602, blue: 0.973, alpha: 1.000)
        let buttonLo = UIColor(red: 0.871, green: 0.866, blue: 0.919, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 5

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let buttonFill = inputText == "1" ? buttonHi : buttonLo

        //// Rectangle Drawing
        let rectangleRect = CGRect(x: 9, y: 8, width: 49, height: 42)
        let rectanglePath = UIBezierPath(roundedRect: rectangleRect, cornerRadius: 6)
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        buttonFill.setFill()
        rectanglePath.fill()
        context.restoreGState()

        colour.setStroke()
        rectanglePath.lineWidth = 2.5
        rectanglePath.stroke()
        let rectangleStyle = NSMutableParagraphStyle()
        rectangleStyle.alignment = .center
        let rectangleFontAttributes = [
            NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: 30)!,
            NSForegroundColorAttributeName: UIColor.black,
            NSParagraphStyleAttributeName: rectangleStyle,
        ]

        let rectangleTextHeight: CGFloat = inputText.boundingRect(with: CGSize(width: rectangleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: rectangleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: rectangleRect)
        inputText.draw(in: CGRect(x: rectangleRect.minX, y: rectangleRect.minY + (rectangleRect.height - rectangleTextHeight) / 2, width: rectangleRect.width, height: rectangleTextHeight), withAttributes: rectangleFontAttributes)
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 58, y: 30))
        bezierPath.addLine(to: CGPoint(x: 80, y: 30))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawIndicator(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 61), resizing: ResizingBehavior = .aspectFit, highlight: Bool = false, inputText: String = "1") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 86, height: 61), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 86, y: resizedFrame.height / 61)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 86, resizedFrame.height / 61)


        //// Color Declarations
        let buttonHi = UIColor(red: 0.290, green: 0.602, blue: 0.973, alpha: 1.000)
        let buttonLo = UIColor(red: 0.871, green: 0.866, blue: 0.919, alpha: 1.000)

        //// Gradient Declarations
        let gradientHigh = CGGradient(colorsSpace: nil, colors: [UIColor.white.cgColor, UIColor.white.blended(withFraction: 0.5, of: buttonHi).cgColor, buttonHi.cgColor] as CFArray, locations: [0, 0.23, 1])!
        let gradientLow = CGGradient(colorsSpace: nil, colors: [buttonLo.cgColor, buttonLo.blended(withFraction: 0.5, of: UIColor.black).cgColor, UIColor.black.cgColor] as CFArray, locations: [0, 0.38, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.black
        shadow.shadowOffset = CGSize(width: 3, height: 3)
        shadow.shadowBlurRadius = 5

        //// Variable Declarations
        let colour = highlight ? Gates.highlightColour : Gates.baseColor
        let gradientFill = inputText == "1" ? gradientHigh : gradientLow

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 7, y: 29))
        bezierPath.addLine(to: CGPoint(x: 29, y: 29))
        colour.setStroke()
        bezierPath.lineWidth = 2.5
        bezierPath.stroke()


        //// Oval Drawing
        let ovalRect = CGRect(x: 29, y: 5, width: 49, height: 47)
        let ovalPath = UIBezierPath(ovalIn: ovalRect)
        context.saveGState()
        context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        ovalPath.addClip()
        context.drawRadialGradient(gradientFill,
            startCenter: CGPoint(x: 53.5, y: 28.5), startRadius: 13.06,
            endCenter: CGPoint(x: 53.5, y: 28.5), endRadius: 30.93,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.endTransparencyLayer()
        context.restoreGState()

        colour.setStroke()
        ovalPath.lineWidth = 2.5
        ovalPath.stroke()
        let ovalStyle = NSMutableParagraphStyle()
        ovalStyle.alignment = .center
        let ovalFontAttributes = [
            NSFontAttributeName: UIFont(name: "HelveticaNeue-Bold", size: 30)!,
            NSForegroundColorAttributeName: UIColor.black,
            NSParagraphStyleAttributeName: ovalStyle,
        ]

        let ovalTextHeight: CGFloat = inputText.boundingRect(with: CGSize(width: ovalRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: ovalFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: ovalRect)
        inputText.draw(in: CGRect(x: ovalRect.minX, y: ovalRect.minY + (ovalRect.height - ovalTextHeight) / 2, width: ovalRect.width, height: ovalTextHeight), withAttributes: ovalFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class func imageOfAnd(imageSize: CGSize = CGSize(width: 86, height: 68), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawAnd(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfAnd = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfAnd
    }

    @objc dynamic public class func imageOfOr(imageSize: CGSize = CGSize(width: 87, height: 67), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawOr(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfOr = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfOr
    }

    @objc dynamic public class func imageOfShield(imageSize: CGSize = CGSize(width: 20, height: 67), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawShield(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfShield = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfShield
    }

    @objc dynamic public class func imageOfNot(imageSize: CGSize = CGSize(width: 19, height: 19), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawNot(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfNot = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfNot
    }

    @objc dynamic public class func imageOfBuffer(imageSize: CGSize = CGSize(width: 49, height: 57), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawBuffer(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfBuffer = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfBuffer
    }

    @objc dynamic public class func imageOfInverter(imageSize: CGSize = CGSize(width: 65, height: 57), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawInverter(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfInverter = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfInverter
    }

    @objc dynamic public class func imageOfNand(imageSize: CGSize = CGSize(width: 98, height: 68), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawNand(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfNand = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfNand
    }

    @objc dynamic public class func imageOfExOr(imageSize: CGSize = CGSize(width: 97, height: 67), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawExOr(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfExOr = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfExOr
    }

    @objc dynamic public class func imageOfExNor(imageSize: CGSize = CGSize(width: 110, height: 67), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawExNor(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfExNor = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfExNor
    }

    @objc dynamic public class func imageOfNor(imageSize: CGSize = CGSize(width: 100, height: 67), highlight: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            Gates.drawNor(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), highlight: highlight)

        let imageOfNor = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfNor
    }

    @objc dynamic public class func imageOfButton(highlight: Bool = false, inputText: String = "1") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 86, height: 61), false, 0)
            Gates.drawButton(highlight: highlight, inputText: inputText)

        let imageOfButton = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfButton
    }

    @objc dynamic public class func imageOfIndicator(highlight: Bool = false, inputText: String = "1") -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 86, height: 61), false, 0)
            Gates.drawIndicator(highlight: highlight, inputText: inputText)

        let imageOfIndicator = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfIndicator
    }




    @objc(GatesResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
